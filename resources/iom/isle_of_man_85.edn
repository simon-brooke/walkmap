[[{:x 0, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 0, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 1, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 1, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 1, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 1, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 1, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 2, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 2, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 2, :state :water, :altitude 1, :gradient 21, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 2, :state :water, :altitude 1, :gradient 22, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 2, :state :water, :altitude 1, :gradient 28, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 2, :state :house, :altitude 19, :gradient 28, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 51} {:x 61, :y 2, :state :house, :altitude 14, :gradient 28, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 62, :y 2, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 2, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 3, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 3, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 3, :state :water, :altitude 1, :gradient 23, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 3, :state :house, :altitude 13, :gradient 27, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 5} {:x 57, :y 3, :state :climax, :altitude 15, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 58, :y 3, :state :climax, :altitude 22, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 74} {:x 59, :y 3, :state :ploughland, :altitude 23, :gradient 28, :generation 89, :rule "if state is waste and fertility is more than 10 and some neighbours are house or some neighbours are camp then state should be ploughland", :fertility 31} {:x 60, :y 3, :state :crop, :altitude 29, :gradient 27, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 21} {:x 61, :y 3, :state :ploughland, :altitude 18, :gradient 28, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 35} {:x 62, :y 3, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 3, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 4, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 4, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 4, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 4, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 4, :state :water, :altitude 1, :gradient 19, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 4, :state :water, :altitude 1, :gradient 23, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 4, :state :waste, :altitude 12, :gradient 27, :generation 89, :rule "if state is camp then 1 chance in 5 state should be waste", :fertility 30} {:x 55, :y 4, :state :climax, :altitude 18, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 56, :y 4, :state :climax, :altitude 24, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 57, :y 4, :state :grassland, :altitude 28, :gradient 15, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 33} {:x 58, :y 4, :state :crop, :altitude 28, :gradient 13, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 35} {:x 59, :y 4, :state :crop, :altitude 27, :gradient 7, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 26} {:x 60, :y 4, :state :crop, :altitude 28, :gradient 11, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 31} {:x 61, :y 4, :state :climax, :altitude 18, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 62, :y 4, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 4, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 5, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 5, :state :water, :altitude 1, :gradient 23, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 5, :state :house, :altitude 12, :gradient 26, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 62} {:x 50, :y 5, :state :crop, :altitude 14, :gradient 26, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 44} {:x 51, :y 5, :state :climax, :altitude 13, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 52, :y 5, :state :climax, :altitude 19, :gradient 26, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 49} {:x 53, :y 5, :state :climax, :altitude 20, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 78} {:x 54, :y 5, :state :climax, :altitude 24, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 55, :y 5, :state :climax, :altitude 28, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 56, :y 5, :state :climax, :altitude 26, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 57, :y 5, :state :climax, :altitude 27, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 58, :y 5, :state :pasture, :altitude 27, :gradient 1, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 25} {:x 59, :y 5, :state :scrub, :altitude 27, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 45} {:x 60, :y 5, :state :climax, :altitude 28, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 61, :y 5, :state :climax, :altitude 18, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 62, :y 5, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 5, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 6, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 6, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 6, :state :water, :altitude 1, :gradient 19, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 6, :state :water, :altitude 1, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 6, :state :crop, :altitude 15, :gradient 26, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 50} {:x 49, :y 6, :state :climax, :altitude 24, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 50, :y 6, :state :climax, :altitude 27, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 51, :y 6, :state :scrub, :altitude 27, :gradient 15, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 44} {:x 52, :y 6, :state :scrub, :altitude 27, :gradient 15, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 59} {:x 53, :y 6, :state :climax, :altitude 27, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 54, :y 6, :state :scrub, :altitude 27, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 47} {:x 55, :y 6, :state :scrub, :altitude 27, :gradient 5, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 61} {:x 56, :y 6, :state :climax, :altitude 27, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 57, :y 6, :state :climax, :altitude 27, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 58, :y 6, :state :heath, :altitude 27, :gradient 1, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 40} {:x 59, :y 6, :state :climax, :altitude 27, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 25} {:x 60, :y 6, :state :climax, :altitude 28, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 61, :y 6, :state :climax, :altitude 18, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 62, :y 6, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 6, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 7, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 7, :state :water, :altitude 1, :gradient 19, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 7, :state :water, :altitude 2, :gradient 30, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 7, :state :house, :altitude 15, :gradient 32, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 10} {:x 47, :y 7, :state :ploughland, :altitude 20, :gradient 32, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 23} {:x 48, :y 7, :state :climax, :altitude 27, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 49, :y 7, :state :climax, :altitude 27, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 50, :y 7, :state :climax, :altitude 28, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 71} {:x 51, :y 7, :state :climax, :altitude 28, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 52, :y 7, :state :climax, :altitude 28, :gradient 4, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 49} {:x 53, :y 7, :state :climax, :altitude 28, :gradient 5, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 54, :y 7, :state :climax, :altitude 28, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 55, :y 7, :state :scrub, :altitude 29, :gradient 6, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 56, :y 7, :state :climax, :altitude 29, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 57, :y 7, :state :climax, :altitude 28, :gradient 5, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 58, :y 7, :state :pasture, :altitude 28, :gradient 2, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 32} {:x 59, :y 7, :state :climax, :altitude 28, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 22} {:x 60, :y 7, :state :pasture, :altitude 29, :gradient 13, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 23} {:x 61, :y 7, :state :climax, :altitude 18, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 62, :y 7, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 7, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 8, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 8, :state :water, :altitude 1, :gradient 25, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 8, :state :house, :altitude 12, :gradient 28, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 46} {:x 45, :y 8, :state :crop, :altitude 20, :gradient 32, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 34} {:x 46, :y 8, :state :crop, :altitude 31, :gradient 31, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 30} {:x 47, :y 8, :state :ploughland, :altitude 33, :gradient 18, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 15} {:x 48, :y 8, :state :climax, :altitude 33, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 20} {:x 49, :y 8, :state :climax, :altitude 32, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 50, :y 8, :state :climax, :altitude 31, :gradient 5, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 51, :y 8, :state :climax, :altitude 29, :gradient 5, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 52, :y 8, :state :scrub, :altitude 29, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 51} {:x 53, :y 8, :state :climax, :altitude 31, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 30} {:x 54, :y 8, :state :climax, :altitude 32, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 27} {:x 55, :y 8, :state :climax, :altitude 33, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 56, :y 8, :state :climax, :altitude 32, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 28} {:x 57, :y 8, :state :climax, :altitude 29, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 58, :y 8, :state :pasture, :altitude 29, :gradient 8, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 26} {:x 59, :y 8, :state :crop, :altitude 28, :gradient 4, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 31} {:x 60, :y 8, :state :pasture, :altitude 31, :gradient 17, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 14} {:x 61, :y 8, :state :ploughland, :altitude 18, :gradient 30, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 28} {:x 62, :y 8, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 8, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 9, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 9, :state :water, :altitude 1, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 9, :state :climax, :altitude 13, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 76} {:x 44, :y 9, :state :house, :altitude 26, :gradient 30, :generation 89, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 32} {:x 45, :y 9, :state :climax, :altitude 29, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 46, :y 9, :state :pasture, :altitude 33, :gradient 13, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 6} {:x 47, :y 9, :state :climax, :altitude 33, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 48, :y 9, :state :climax, :altitude 33, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 49, :y 9, :state :climax, :altitude 31, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 50, :y 9, :state :climax, :altitude 31, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 78} {:x 51, :y 9, :state :climax, :altitude 31, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 52, :y 9, :state :forest, :altitude 33, :gradient 8, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 36} {:x 53, :y 9, :state :climax, :altitude 37, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 54, :y 9, :state :climax, :altitude 40, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 55, :y 9, :state :climax, :altitude 40, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 29} {:x 56, :y 9, :state :climax, :altitude 38, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 57, :y 9, :state :climax, :altitude 36, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 58, :y 9, :state :climax, :altitude 32, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 59, :y 9, :state :pasture, :altitude 29, :gradient 9, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 25} {:x 60, :y 9, :state :house, :altitude 29, :gradient 31, :generation 89, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 24} {:x 61, :y 9, :state :house, :altitude 12, :gradient 30, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 13} {:x 62, :y 9, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 9, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 10, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 10, :state :water, :altitude 1, :gradient 21, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 10, :state :water, :altitude 1, :gradient 32, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 10, :state :climax, :altitude 14, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 43, :y 10, :state :ploughland, :altitude 27, :gradient 32, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 45} {:x 44, :y 10, :state :ploughland, :altitude 28, :gradient 18, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 48} {:x 45, :y 10, :state :pasture, :altitude 31, :gradient 7, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 43} {:x 46, :y 10, :state :climax, :altitude 32, :gradient 5, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 47, :y 10, :state :climax, :altitude 32, :gradient 5, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 31} {:x 48, :y 10, :state :climax, :altitude 29, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 49, :y 10, :state :climax, :altitude 31, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 50, :y 10, :state :climax, :altitude 29, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 51, :y 10, :state :climax, :altitude 31, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 52, :y 10, :state :scrub, :altitude 33, :gradient 6, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 48} {:x 53, :y 10, :state :climax, :altitude 36, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 54, :y 10, :state :climax, :altitude 40, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 25} {:x 55, :y 10, :state :climax, :altitude 42, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 56, :y 10, :state :climax, :altitude 41, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 57, :y 10, :state :climax, :altitude 41, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 58, :y 10, :state :climax, :altitude 37, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 59, :y 10, :state :scrub, :altitude 33, :gradient 19, :generation 89, :rule "if state is in climax and more than 3 neighbours within 2 are house then state should be scrub", :fertility 38} {:x 60, :y 10, :state :house, :altitude 28, :gradient 37, :generation 89, :rule "if state is house and some neighbours are ploughland then state should be house", :fertility 39} {:x 61, :y 10, :state :water, :altitude 2, :gradient 28, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 10, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 10, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 11, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 11, :state :water, :altitude 1, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 11, :state :water, :altitude 2, :gradient 32, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 11, :state :climax, :altitude 22, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 42, :y 11, :state :climax, :altitude 33, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 43, :y 11, :state :climax, :altitude 29, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 44, :y 11, :state :climax, :altitude 28, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 45, :y 11, :state :fire, :altitude 28, :gradient 4, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 77} {:x 46, :y 11, :state :climax, :altitude 28, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 47, :y 11, :state :climax, :altitude 29, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 73} {:x 48, :y 11, :state :scrub, :altitude 31, :gradient 4, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 41} {:x 49, :y 11, :state :climax, :altitude 31, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 23} {:x 50, :y 11, :state :climax, :altitude 29, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 51, :y 11, :state :scrub, :altitude 31, :gradient 4, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 31} {:x 52, :y 11, :state :climax, :altitude 32, :gradient 5, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 53, :y 11, :state :scrub, :altitude 33, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 41} {:x 54, :y 11, :state :climax, :altitude 35, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 55, :y 11, :state :climax, :altitude 36, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 56, :y 11, :state :scrub, :altitude 37, :gradient 10, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 43} {:x 57, :y 11, :state :scrub, :altitude 40, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 20} {:x 58, :y 11, :state :climax, :altitude 41, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 59, :y 11, :state :crop, :altitude 38, :gradient 28, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 41} {:x 60, :y 11, :state :crop, :altitude 22, :gradient 37, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 29} {:x 61, :y 11, :state :water, :altitude 1, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 11, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 11, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 12, :state :water, :altitude 1, :gradient 19, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 12, :state :water, :altitude 2, :gradient 32, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 12, :state :climax, :altitude 27, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 41, :y 12, :state :climax, :altitude 33, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 42, :y 12, :state :climax, :altitude 31, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 43, :y 12, :state :climax, :altitude 31, :gradient 5, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 32} {:x 44, :y 12, :state :waste, :altitude 29, :gradient 3, :generation 89, :rule "if state is fire then state should be waste", :fertility 60} {:x 45, :y 12, :state :climax, :altitude 29, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 46, :y 12, :state :fire, :altitude 29, :gradient 3, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 32} {:x 47, :y 12, :state :climax, :altitude 28, :gradient 3, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 52} {:x 48, :y 12, :state :fire, :altitude 29, :gradient 4, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 59} {:x 49, :y 12, :state :scrub, :altitude 32, :gradient 3, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 48} {:x 50, :y 12, :state :climax, :altitude 31, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 51, :y 12, :state :scrub, :altitude 31, :gradient 3, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 63} {:x 52, :y 12, :state :forest, :altitude 31, :gradient 2, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 60} {:x 53, :y 12, :state :scrub, :altitude 32, :gradient 4, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 36} {:x 54, :y 12, :state :scrub, :altitude 32, :gradient 5, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 40} {:x 55, :y 12, :state :scrub, :altitude 32, :gradient 6, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 53} {:x 56, :y 12, :state :scrub, :altitude 32, :gradient 8, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 29} {:x 57, :y 12, :state :heath, :altitude 36, :gradient 9, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 33} {:x 58, :y 12, :state :ploughland, :altitude 41, :gradient 14, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 34} {:x 59, :y 12, :state :house, :altitude 36, :gradient 40, :generation 89, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 39} {:x 60, :y 12, :state :climax, :altitude 13, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 61, :y 12, :state :water, :altitude 1, :gradient 21, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 12, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 13, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 13, :state :water, :altitude 1, :gradient 31, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 13, :state :pasture, :altitude 20, :gradient 32, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 33} {:x 40, :y 13, :state :climax, :altitude 33, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 30} {:x 41, :y 13, :state :climax, :altitude 32, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 42, :y 13, :state :climax, :altitude 31, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 43, :y 13, :state :waste, :altitude 31, :gradient 2, :generation 89, :rule "if state is fire then state should be waste", :fertility 34} {:x 44, :y 13, :state :heath, :altitude 31, :gradient 2, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 33} {:x 45, :y 13, :state :heath, :altitude 31, :gradient 2, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 52} {:x 46, :y 13, :state :waste, :altitude 31, :gradient 3, :generation 89, :rule "if state is fire then state should be waste", :fertility 53} {:x 47, :y 13, :state :waste, :altitude 28, :gradient 3, :generation 89, :rule "if state is fire then state should be waste", :fertility 57} {:x 48, :y 13, :state :heath, :altitude 29, :gradient 4, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 47} {:x 49, :y 13, :state :climax, :altitude 32, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 50, :y 13, :state :climax, :altitude 31, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 51, :y 13, :state :scrub, :altitude 31, :gradient 2, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 56} {:x 52, :y 13, :state :climax, :altitude 31, :gradient 3, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 49} {:x 53, :y 13, :state :climax, :altitude 32, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 54, :y 13, :state :scrub, :altitude 31, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 24} {:x 55, :y 13, :state :scrub, :altitude 32, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 47} {:x 56, :y 13, :state :heath, :altitude 32, :gradient 5, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 54} {:x 57, :y 13, :state :pasture, :altitude 32, :gradient 10, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 48} {:x 58, :y 13, :state :ploughland, :altitude 36, :gradient 24, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 37} {:x 59, :y 13, :state :climax, :altitude 27, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 60, :y 13, :state :water, :altitude 1, :gradient 35, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 13, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 13, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 14, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 14, :state :water, :altitude 1, :gradient 28, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 14, :state :crop, :altitude 18, :gradient 31, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 19} {:x 39, :y 14, :state :crop, :altitude 32, :gradient 32, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 34} {:x 40, :y 14, :state :crop, :altitude 31, :gradient 13, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 33} {:x 41, :y 14, :state :climax, :altitude 32, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 42, :y 14, :state :scrub, :altitude 31, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 43, :y 14, :state :heath, :altitude 31, :gradient 2, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 51} {:x 44, :y 14, :state :scrub, :altitude 29, :gradient 2, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 33} {:x 45, :y 14, :state :climax, :altitude 29, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 71} {:x 46, :y 14, :state :fire, :altitude 29, :gradient 3, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 51} {:x 47, :y 14, :state :heath, :altitude 28, :gradient 3, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 38} {:x 48, :y 14, :state :scrub, :altitude 29, :gradient 4, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 46} {:x 49, :y 14, :state :waste, :altitude 31, :gradient 3, :generation 89, :rule "if state is fire then state should be waste", :fertility 41} {:x 50, :y 14, :state :scrub, :altitude 29, :gradient 3, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 51, :y 14, :state :climax, :altitude 29, :gradient 3, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 49} {:x 52, :y 14, :state :scrub, :altitude 29, :gradient 4, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 58} {:x 53, :y 14, :state :climax, :altitude 31, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 54, :y 14, :state :climax, :altitude 31, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 55, :y 14, :state :climax, :altitude 31, :gradient 3, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 13} {:x 56, :y 14, :state :scrub, :altitude 31, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 35} {:x 57, :y 14, :state :pasture, :altitude 32, :gradient 7, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 49} {:x 58, :y 14, :state :grassland, :altitude 32, :gradient 21, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 18} {:x 59, :y 14, :state :climax, :altitude 17, :gradient 35, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 60, :y 14, :state :water, :altitude 1, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 14, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 15, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 15, :state :house, :altitude 12, :gradient 30, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 38, :y 15, :state :grassland, :altitude 29, :gradient 31, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 14} {:x 39, :y 15, :state :house, :altitude 31, :gradient 14, :generation 89, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 19} {:x 40, :y 15, :state :pasture, :altitude 31, :gradient 1, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 8} {:x 41, :y 15, :state :climax, :altitude 31, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 11} {:x 42, :y 15, :state :climax, :altitude 31, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 43, :y 15, :state :scrub, :altitude 31, :gradient 2, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 42} {:x 44, :y 15, :state :waste, :altitude 31, :gradient 2, :generation 89, :rule "if state is fire then state should be waste", :fertility 40} {:x 45, :y 15, :state :scrub, :altitude 29, :gradient 3, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 64} {:x 46, :y 15, :state :fire, :altitude 29, :gradient 1, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 40} {:x 47, :y 15, :state :scrub, :altitude 28, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 35} {:x 48, :y 15, :state :scrub, :altitude 29, :gradient 3, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 28} {:x 49, :y 15, :state :forest, :altitude 29, :gradient 3, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 44} {:x 50, :y 15, :state :scrub, :altitude 29, :gradient 3, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 31} {:x 51, :y 15, :state :waste, :altitude 29, :gradient 1, :generation 89, :rule "if state is fire then state should be waste", :fertility 57} {:x 52, :y 15, :state :climax, :altitude 28, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 53, :y 15, :state :climax, :altitude 28, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 25} {:x 54, :y 15, :state :climax, :altitude 29, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 55, :y 15, :state :scrub, :altitude 31, :gradient 2, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 44} {:x 56, :y 15, :state :climax, :altitude 31, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 31} {:x 57, :y 15, :state :pasture, :altitude 31, :gradient 5, :generation 89, :rule "if state is in grassland or heath and some neighbours are camp then 1 chance in 2 state should be pasture", :fertility 32} {:x 58, :y 15, :state :grassland, :altitude 29, :gradient 30, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 25} {:x 59, :y 15, :state :house, :altitude 15, :gradient 31, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 4} {:x 60, :y 15, :state :water, :altitude 1, :gradient 16, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 15, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 16, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 16, :state :climax, :altitude 13, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 38, :y 16, :state :house, :altitude 31, :gradient 19, :generation 89, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 30} {:x 39, :y 16, :state :ploughland, :altitude 31, :gradient 2, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 16} {:x 40, :y 16, :state :camp, :altitude 31, :gradient 3, :generation 89, :rule "if state is in grassland or heath and more than 2 neighbours are pasture then 1 chance in 3 state should be camp", :fertility 34} {:x 41, :y 16, :state :heath, :altitude 31, :gradient 3, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 34} {:x 42, :y 16, :state :scrub, :altitude 31, :gradient 3, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 36} {:x 43, :y 16, :state :scrub, :altitude 31, :gradient 3, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 42} {:x 44, :y 16, :state :scrub, :altitude 29, :gradient 3, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 29} {:x 45, :y 16, :state :climax, :altitude 29, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 46, :y 16, :state :waste, :altitude 28, :gradient 1, :generation 89, :rule "if state is fire then state should be waste", :fertility 38} {:x 47, :y 16, :state :heath, :altitude 28, :gradient 1, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 20} {:x 48, :y 16, :state :climax, :altitude 29, :gradient 1, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 33} {:x 49, :y 16, :state :scrub, :altitude 29, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 50, :y 16, :state :heath, :altitude 28, :gradient 1, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 48} {:x 51, :y 16, :state :waste, :altitude 28, :gradient 1, :generation 89, :rule "if state is fire then state should be waste", :fertility 57} {:x 52, :y 16, :state :climax, :altitude 28, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 73} {:x 53, :y 16, :state :climax, :altitude 28, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 20} {:x 54, :y 16, :state :climax, :altitude 31, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 55, :y 16, :state :climax, :altitude 31, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 56, :y 16, :state :forest, :altitude 29, :gradient 2, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 37} {:x 57, :y 16, :state :pasture, :altitude 29, :gradient 8, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 28} {:x 58, :y 16, :state :house, :altitude 27, :gradient 30, :generation 89, :rule "if state is in camp or abandoned and some neighbours are crop then state should be house", :fertility 41} {:x 59, :y 16, :state :water, :altitude 2, :gradient 28, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 16, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 16, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 17, :state :water, :altitude 1, :gradient 19, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 17, :state :pasture, :altitude 19, :gradient 30, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 21} {:x 38, :y 17, :state :pasture, :altitude 31, :gradient 18, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 16} {:x 39, :y 17, :state :camp, :altitude 31, :gradient 4, :generation 89, :rule "if state is in grassland or heath and more than 2 neighbours are pasture then 1 chance in 3 state should be camp", :fertility 44} {:x 40, :y 17, :state :pasture, :altitude 29, :gradient 4, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 40} {:x 41, :y 17, :state :scrub, :altitude 28, :gradient 4, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 23} {:x 42, :y 17, :state :scrub, :altitude 28, :gradient 4, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 21} {:x 43, :y 17, :state :scrub, :altitude 28, :gradient 4, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 44, :y 17, :state :scrub, :altitude 28, :gradient 4, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 19} {:x 45, :y 17, :state :scrub, :altitude 28, :gradient 2, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 47} {:x 46, :y 17, :state :scrub, :altitude 28, :gradient 2, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 52} {:x 47, :y 17, :state :scrub, :altitude 29, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 47} {:x 48, :y 17, :state :scrub, :altitude 29, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 45} {:x 49, :y 17, :state :scrub, :altitude 29, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 33} {:x 50, :y 17, :state :scrub, :altitude 28, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 23} {:x 51, :y 17, :state :waste, :altitude 28, :gradient 0, :generation 89, :rule "if state is fire then state should be waste", :fertility 36} {:x 52, :y 17, :state :fire, :altitude 28, :gradient 1, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 50} {:x 53, :y 17, :state :climax, :altitude 29, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 54, :y 17, :state :climax, :altitude 31, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 30} {:x 55, :y 17, :state :climax, :altitude 31, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 56, :y 17, :state :climax, :altitude 29, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 57, :y 17, :state :pasture, :altitude 29, :gradient 7, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 45} {:x 58, :y 17, :state :pasture, :altitude 23, :gradient 28, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 33} {:x 59, :y 17, :state :water, :altitude 1, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 17, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 17, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 18, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 18, :state :water, :altitude 1, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 18, :state :pasture, :altitude 20, :gradient 30, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 49} {:x 38, :y 18, :state :pasture, :altitude 29, :gradient 12, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 33} {:x 39, :y 18, :state :pasture, :altitude 28, :gradient 4, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 48} {:x 40, :y 18, :state :pasture, :altitude 27, :gradient 4, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 17} {:x 41, :y 18, :state :climax, :altitude 27, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 42, :y 18, :state :heath, :altitude 27, :gradient 1, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 43} {:x 43, :y 18, :state :scrub, :altitude 27, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 24} {:x 44, :y 18, :state :climax, :altitude 27, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 45, :y 18, :state :heath, :altitude 27, :gradient 1, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 40} {:x 46, :y 18, :state :climax, :altitude 28, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 47, :y 18, :state :waste, :altitude 28, :gradient 2, :generation 89, :rule "if state is fire then state should be waste", :fertility 52} {:x 48, :y 18, :state :heath, :altitude 28, :gradient 2, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 34} {:x 49, :y 18, :state :scrub, :altitude 28, :gradient 2, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 39} {:x 50, :y 18, :state :forest, :altitude 28, :gradient 2, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 27} {:x 51, :y 18, :state :climax, :altitude 28, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 16} {:x 52, :y 18, :state :fire, :altitude 28, :gradient 2, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 46} {:x 53, :y 18, :state :climax, :altitude 28, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 54, :y 18, :state :climax, :altitude 28, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 55, :y 18, :state :climax, :altitude 29, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 56, :y 18, :state :climax, :altitude 29, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 57, :y 18, :state :climax, :altitude 29, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 72} {:x 58, :y 18, :state :climax, :altitude 22, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 59, :y 18, :state :water, :altitude 1, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 18, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 18, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 19, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 19, :state :water, :altitude 1, :gradient 21, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 19, :state :water, :altitude 2, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 19, :state :climax, :altitude 27, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 38, :y 19, :state :climax, :altitude 28, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 39, :y 19, :state :climax, :altitude 28, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 40, :y 19, :state :climax, :altitude 28, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 41, :y 19, :state :scrub, :altitude 28, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 47} {:x 42, :y 19, :state :climax, :altitude 27, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 30} {:x 43, :y 19, :state :forest, :altitude 27, :gradient 1, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 45} {:x 44, :y 19, :state :climax, :altitude 27, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 45, :y 19, :state :scrub, :altitude 27, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 32} {:x 46, :y 19, :state :fire, :altitude 28, :gradient 1, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 51} {:x 47, :y 19, :state :scrub, :altitude 27, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 44} {:x 48, :y 19, :state :climax, :altitude 27, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 49, :y 19, :state :fire, :altitude 27, :gradient 1, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 22} {:x 50, :y 19, :state :scrub, :altitude 28, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 35} {:x 51, :y 19, :state :scrub, :altitude 27, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 39} {:x 52, :y 19, :state :climax, :altitude 27, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 53, :y 19, :state :climax, :altitude 27, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 54, :y 19, :state :climax, :altitude 27, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 55, :y 19, :state :climax, :altitude 27, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 56, :y 19, :state :climax, :altitude 28, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 57, :y 19, :state :climax, :altitude 31, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 58, :y 19, :state :climax, :altitude 27, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 59, :y 19, :state :water, :altitude 2, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 19, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 19, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 20, :state :water, :altitude 1, :gradient 19, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 20, :state :water, :altitude 2, :gradient 30, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 20, :state :ploughland, :altitude 22, :gradient 30, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 45} {:x 37, :y 20, :state :pasture, :altitude 28, :gradient 29, :generation 89, :rule "if state is in grassland or heath and some neighbours are camp then 1 chance in 2 state should be pasture", :fertility 40} {:x 38, :y 20, :state :climax, :altitude 28, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 39, :y 20, :state :scrub, :altitude 28, :gradient 0, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 42} {:x 40, :y 20, :state :climax, :altitude 28, :gradient 0, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 30} {:x 41, :y 20, :state :scrub, :altitude 28, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 53} {:x 42, :y 20, :state :forest, :altitude 28, :gradient 1, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 56} {:x 43, :y 20, :state :scrub, :altitude 28, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 44, :y 20, :state :climax, :altitude 28, :gradient 1, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 36} {:x 45, :y 20, :state :climax, :altitude 28, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 46, :y 20, :state :scrub, :altitude 28, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 56} {:x 47, :y 20, :state :climax, :altitude 28, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 48, :y 20, :state :heath, :altitude 27, :gradient 1, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 35} {:x 49, :y 20, :state :waste, :altitude 27, :gradient 2, :generation 89, :rule "if state is fire then state should be waste", :fertility 26} {:x 50, :y 20, :state :fire, :altitude 27, :gradient 2, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 22} {:x 51, :y 20, :state :climax, :altitude 27, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 52, :y 20, :state :climax, :altitude 27, :gradient 0, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 53, :y 20, :state :climax, :altitude 27, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 27} {:x 54, :y 20, :state :climax, :altitude 27, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 55, :y 20, :state :climax, :altitude 28, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 56, :y 20, :state :climax, :altitude 29, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 57, :y 20, :state :climax, :altitude 31, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 58, :y 20, :state :climax, :altitude 27, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 59, :y 20, :state :water, :altitude 2, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 20, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 20, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 21, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 21, :state :water, :altitude 1, :gradient 28, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 21, :state :grassland, :altitude 20, :gradient 32, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 58} {:x 36, :y 21, :state :ploughland, :altitude 31, :gradient 31, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 29} {:x 37, :y 21, :state :camp, :altitude 28, :gradient 11, :generation 89, :rule "if state is in grassland or heath and more than 2 neighbours are pasture then 1 chance in 3 state should be camp", :fertility 33} {:x 38, :y 21, :state :climax, :altitude 28, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 39, :y 21, :state :climax, :altitude 28, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 40, :y 21, :state :climax, :altitude 28, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 41, :y 21, :state :climax, :altitude 28, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 42, :y 21, :state :heath, :altitude 28, :gradient 1, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 40} {:x 43, :y 21, :state :climax, :altitude 28, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 44, :y 21, :state :climax, :altitude 28, :gradient 2, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 45, :y 21, :state :scrub, :altitude 28, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 26} {:x 46, :y 21, :state :climax, :altitude 28, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 47, :y 21, :state :scrub, :altitude 28, :gradient 5, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 60} {:x 48, :y 21, :state :climax, :altitude 27, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 49, :y 21, :state :scrub, :altitude 27, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 22} {:x 50, :y 21, :state :climax, :altitude 26, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 51, :y 21, :state :scrub, :altitude 27, :gradient 6, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 42} {:x 52, :y 21, :state :climax, :altitude 27, :gradient 1, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 53, :y 21, :state :climax, :altitude 27, :gradient 7, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 23} {:x 54, :y 21, :state :scrub, :altitude 26, :gradient 6, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 56} {:x 55, :y 21, :state :climax, :altitude 27, :gradient 7, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 56, :y 21, :state :climax, :altitude 27, :gradient 5, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 57, :y 21, :state :climax, :altitude 28, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 58, :y 21, :state :climax, :altitude 28, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 16} {:x 59, :y 21, :state :ploughland, :altitude 15, :gradient 27, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 29} {:x 60, :y 21, :state :water, :altitude 1, :gradient 25, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 21, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 21, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 22, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 22, :state :house, :altitude 13, :gradient 34, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 35, :y 22, :state :climax, :altitude 29, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 36, :y 22, :state :ploughland, :altitude 33, :gradient 15, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 39} {:x 37, :y 22, :state :climax, :altitude 29, :gradient 7, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 38, :y 22, :state :climax, :altitude 29, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 39, :y 22, :state :forest, :altitude 29, :gradient 3, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 49} {:x 40, :y 22, :state :climax, :altitude 29, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 41, :y 22, :state :waste, :altitude 28, :gradient 6, :generation 89, :rule "if state is fire then state should be waste", :fertility 51} {:x 42, :y 22, :state :fire, :altitude 27, :gradient 15, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 20} {:x 43, :y 22, :state :scrub, :altitude 27, :gradient 15, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 48} {:x 44, :y 22, :state :climax, :altitude 29, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 45, :y 22, :state :forest, :altitude 29, :gradient 7, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 44} {:x 46, :y 22, :state :scrub, :altitude 29, :gradient 12, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 59} {:x 47, :y 22, :state :scrub, :altitude 29, :gradient 20, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 52} {:x 48, :y 22, :state :scrub, :altitude 32, :gradient 30, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 49} {:x 49, :y 22, :state :scrub, :altitude 35, :gradient 37, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 28} {:x 50, :y 22, :state :scrub, :altitude 32, :gradient 37, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 17} {:x 51, :y 22, :state :climax, :altitude 28, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 52, :y 22, :state :climax, :altitude 28, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 31} {:x 53, :y 22, :state :scrub, :altitude 28, :gradient 31, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 58} {:x 54, :y 22, :state :climax, :altitude 33, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 55, :y 22, :state :climax, :altitude 32, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 25} {:x 56, :y 22, :state :climax, :altitude 27, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 57, :y 22, :state :climax, :altitude 27, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 58, :y 22, :state :pasture, :altitude 27, :gradient 21, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 25} {:x 59, :y 22, :state :ploughland, :altitude 26, :gradient 35, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 37} {:x 60, :y 22, :state :house, :altitude 12, :gradient 35, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 14} {:x 61, :y 22, :state :water, :altitude 1, :gradient 19, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 22, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 23, :state :water, :altitude 1, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 23, :state :grassland, :altitude 19, :gradient 34, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 22} {:x 35, :y 23, :state :grassland, :altitude 35, :gradient 22, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 39} {:x 36, :y 23, :state :pasture, :altitude 35, :gradient 6, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 39} {:x 37, :y 23, :state :climax, :altitude 32, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 38, :y 23, :state :climax, :altitude 31, :gradient 3, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 39, :y 23, :state :scrub, :altitude 31, :gradient 4, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 40, :y 23, :state :scrub, :altitude 29, :gradient 15, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 39} {:x 41, :y 23, :state :fire, :altitude 28, :gradient 38, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 38} {:x 42, :y 23, :state :scrub, :altitude 33, :gradient 47, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 26} {:x 43, :y 23, :state :scrub, :altitude 42, :gradient 47, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 39} {:x 44, :y 23, :state :scrub, :altitude 35, :gradient 47, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 47} {:x 45, :y 23, :state :climax, :altitude 31, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 24} {:x 46, :y 23, :state :climax, :altitude 33, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 47, :y 23, :state :scrub, :altitude 40, :gradient 34, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 32} {:x 48, :y 23, :state :climax, :altitude 47, :gradient 35, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 49, :y 23, :state :climax, :altitude 57, :gradient 43, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 80} {:x 50, :y 23, :state :climax, :altitude 63, :gradient 49, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 22} {:x 51, :y 23, :state :climax, :altitude 51, :gradient 49, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 52, :y 23, :state :climax, :altitude 46, :gradient 49, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 30} {:x 53, :y 23, :state :climax, :altitude 52, :gradient 45, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 26} {:x 54, :y 23, :state :climax, :altitude 57, :gradient 45, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 55, :y 23, :state :climax, :altitude 41, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 56, :y 23, :state :climax, :altitude 31, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 57, :y 23, :state :climax, :altitude 29, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 58, :y 23, :state :pasture, :altitude 35, :gradient 26, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 26} {:x 59, :y 23, :state :crop, :altitude 36, :gradient 40, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 39} {:x 60, :y 23, :state :house, :altitude 20, :gradient 48, :generation 89, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 59} {:x 61, :y 23, :state :water, :altitude 1, :gradient 45, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 23, :state :water, :altitude 1, :gradient 30, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 23, :state :water, :altitude 1, :gradient 23, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 23, :state :water, :altitude 1, :gradient 21, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 23, :state :water, :altitude 1, :gradient 16, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 23, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 24, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 24, :state :water, :altitude 1, :gradient 32, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 24, :state :climax, :altitude 27, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 35, :y 24, :state :climax, :altitude 35, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 36, :y 24, :state :heath, :altitude 35, :gradient 4, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 57} {:x 37, :y 24, :state :climax, :altitude 32, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 38, :y 24, :state :fire, :altitude 32, :gradient 9, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 52} {:x 39, :y 24, :state :scrub, :altitude 32, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 40} {:x 40, :y 24, :state :scrub, :altitude 33, :gradient 36, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 36} {:x 41, :y 24, :state :scrub, :altitude 43, :gradient 54, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 52} {:x 42, :y 24, :state :scrub, :altitude 65, :gradient 54, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 43, :y 24, :state :waste, :altitude 74, :gradient 49, :generation 89, :rule "if state is fire then state should be waste", :fertility 42} {:x 44, :y 24, :state :heath, :altitude 52, :gradient 44, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 45} {:x 45, :y 24, :state :heath, :altitude 37, :gradient 34, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 46} {:x 46, :y 24, :state :waste, :altitude 54, :gradient 46, :generation 89, :rule "if state is fire then state should be waste", :fertility 55} {:x 47, :y 24, :state :climax, :altitude 59, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 48, :y 24, :state :climax, :altitude 63, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 49, :y 24, :state :scrub, :altitude 64, :gradient 32, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 35} {:x 50, :y 24, :state :scrub, :altitude 75, :gradient 35, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 44} {:x 51, :y 24, :state :scrub, :altitude 77, :gradient 40, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 34} {:x 52, :y 24, :state :heath, :altitude 73, :gradient 40, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 35} {:x 53, :y 24, :state :forest, :altitude 73, :gradient 36, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 54, :y 24, :state :climax, :altitude 59, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 29} {:x 55, :y 24, :state :scrub, :altitude 40, :gradient 28, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 27} {:x 56, :y 24, :state :climax, :altitude 50, :gradient 41, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 21} {:x 57, :y 24, :state :climax, :altitude 52, :gradient 41, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 27} {:x 58, :y 24, :state :pasture, :altitude 52, :gradient 41, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 34} {:x 59, :y 24, :state :pasture, :altitude 49, :gradient 49, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 44} {:x 60, :y 24, :state :pasture, :altitude 46, :gradient 68, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 46} {:x 61, :y 24, :state :pasture, :altitude 31, :gradient 68, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 29} {:x 62, :y 24, :state :pasture, :altitude 24, :gradient 50, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 36} {:x 63, :y 24, :state :climax, :altitude 22, :gradient 36, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 64, :y 24, :state :heath, :altitude 17, :gradient 36, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 24} {:x 65, :y 24, :state :water, :altitude 1, :gradient 36, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 24, :state :water, :altitude 1, :gradient 31, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 24, :state :water, :altitude 1, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 24, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 24, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 25, :state :water, :altitude 1, :gradient 21, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 25, :state :house, :altitude 13, :gradient 32, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 44} {:x 34, :y 25, :state :climax, :altitude 33, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 19} {:x 35, :y 25, :state :climax, :altitude 32, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 36, :y 25, :state :climax, :altitude 32, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 37, :y 25, :state :climax, :altitude 36, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 38, :y 25, :state :scrub, :altitude 40, :gradient 20, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 34} {:x 39, :y 25, :state :waste, :altitude 36, :gradient 20, :generation 89, :rule "if state is fire then state should be waste", :fertility 40} {:x 40, :y 25, :state :scrub, :altitude 42, :gradient 36, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 16} {:x 41, :y 25, :state :scrub, :altitude 64, :gradient 51, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 47} {:x 42, :y 25, :state :scrub, :altitude 82, :gradient 41, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 35} {:x 43, :y 25, :state :forest, :altitude 75, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 44, :y 25, :state :scrub, :altitude 65, :gradient 45, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 44} {:x 45, :y 25, :state :scrub, :altitude 51, :gradient 45, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 57} {:x 46, :y 25, :state :scrub, :altitude 60, :gradient 40, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 23} {:x 47, :y 25, :state :heath, :altitude 77, :gradient 30, :generation 89, :rule "if state is waste and some neighbours are forest then state should be heath", :fertility 23} {:x 48, :y 25, :state :fire, :altitude 75, :gradient 24, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 22} {:x 49, :y 25, :state :fire, :altitude 74, :gradient 25, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 37} {:x 50, :y 25, :state :forest, :altitude 79, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 32} {:x 51, :y 25, :state :scrub, :altitude 86, :gradient 19, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 61} {:x 52, :y 25, :state :forest, :altitude 82, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 53, :y 25, :state :climax, :altitude 65, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 54, :y 25, :state :climax, :altitude 50, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 55, :y 25, :state :climax, :altitude 50, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 14} {:x 56, :y 25, :state :climax, :altitude 59, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 25} {:x 57, :y 25, :state :forest, :altitude 70, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 58, :y 25, :state :climax, :altitude 66, :gradient 35, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 30} {:x 59, :y 25, :state :climax, :altitude 61, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 60, :y 25, :state :climax, :altitude 69, :gradient 43, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 61, :y 25, :state :climax, :altitude 51, :gradient 49, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 62, :y 25, :state :climax, :altitude 31, :gradient 35, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 63, :y 25, :state :climax, :altitude 33, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 64, :y 25, :state :climax, :altitude 37, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 65, :y 25, :state :climax, :altitude 32, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 74} {:x 66, :y 25, :state :climax, :altitude 27, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 67, :y 25, :state :water, :altitude 2, :gradient 41, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 25, :state :water, :altitude 1, :gradient 30, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 25, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 26, :state :water, :altitude 1, :gradient 23, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 26, :state :grassland, :altitude 22, :gradient 34, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 34} {:x 34, :y 26, :state :grassland, :altitude 33, :gradient 22, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 10} {:x 35, :y 26, :state :climax, :altitude 32, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 36, :y 26, :state :climax, :altitude 37, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 37, :y 26, :state :climax, :altitude 45, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 38, :y 26, :state :scrub, :altitude 52, :gradient 25, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 30} {:x 39, :y 26, :state :fire, :altitude 42, :gradient 25, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 38} {:x 40, :y 26, :state :scrub, :altitude 46, :gradient 32, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 35} {:x 41, :y 26, :state :climax, :altitude 68, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 42, :y 26, :state :scrub, :altitude 84, :gradient 24, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 44} {:x 43, :y 26, :state :scrub, :altitude 78, :gradient 28, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 44, :y 26, :state :scrub, :altitude 82, :gradient 42, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 45, :y 26, :state :scrub, :altitude 70, :gradient 44, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 56} {:x 46, :y 26, :state :climax, :altitude 49, :gradient 35, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 46} {:x 47, :y 26, :state :heath, :altitude 70, :gradient 42, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 40} {:x 48, :y 26, :state :waste, :altitude 79, :gradient 21, :generation 89, :rule "if state is fire then state should be waste", :fertility 49} {:x 49, :y 26, :state :forest, :altitude 83, :gradient 22, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 31} {:x 50, :y 26, :state :forest, :altitude 88, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 51, :y 26, :state :forest, :altitude 92, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 52, :y 26, :state :forest, :altitude 87, :gradient 39, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 31} {:x 53, :y 26, :state :climax, :altitude 61, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 54, :y 26, :state :climax, :altitude 65, :gradient 47, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 55, :y 26, :state :forest, :altitude 77, :gradient 55, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 56, :y 26, :state :forest, :altitude 77, :gradient 61, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 57, :y 26, :state :forest, :altitude 84, :gradient 52, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 58, :y 26, :state :forest, :altitude 80, :gradient 50, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 59, :y 26, :state :forest, :altitude 74, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 60, :y 26, :state :scrub, :altitude 73, :gradient 27, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 22} {:x 61, :y 26, :state :climax, :altitude 57, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 62, :y 26, :state :climax, :altitude 36, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 63, :y 26, :state :forest, :altitude 29, :gradient 19, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 46} {:x 64, :y 26, :state :climax, :altitude 36, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 65, :y 26, :state :climax, :altitude 43, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 70} {:x 66, :y 26, :state :climax, :altitude 42, :gradient 41, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 79} {:x 67, :y 26, :state :climax, :altitude 31, :gradient 41, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 72} {:x 68, :y 26, :state :water, :altitude 1, :gradient 34, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 26, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 26, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 27, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 27, :state :water, :altitude 1, :gradient 30, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 27, :state :grassland, :altitude 24, :gradient 34, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 28} {:x 34, :y 27, :state :climax, :altitude 35, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 35, :y 27, :state :climax, :altitude 33, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 36, :y 27, :state :climax, :altitude 41, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 37, :y 27, :state :climax, :altitude 50, :gradient 41, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 25} {:x 38, :y 27, :state :scrub, :altitude 61, :gradient 36, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 35} {:x 39, :y 27, :state :scrub, :altitude 51, :gradient 36, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 40, :y 27, :state :climax, :altitude 50, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 41, :y 27, :state :heath, :altitude 64, :gradient 38, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 23} {:x 42, :y 27, :state :scrub, :altitude 80, :gradient 28, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 42} {:x 43, :y 27, :state :scrub, :altitude 88, :gradient 15, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 35} {:x 44, :y 27, :state :scrub, :altitude 93, :gradient 36, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 42} {:x 45, :y 27, :state :forest, :altitude 68, :gradient 44, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 47} {:x 46, :y 27, :state :scrub, :altitude 59, :gradient 53, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 30} {:x 47, :y 27, :state :forest, :altitude 86, :gradient 59, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 60} {:x 48, :y 27, :state :forest, :altitude 91, :gradient 38, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 49, :y 27, :state :fire, :altitude 88, :gradient 29, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 41} {:x 50, :y 27, :state :forest, :altitude 96, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 51, :y 27, :state :forest, :altitude 100, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 52, :y 27, :state :forest, :altitude 86, :gradient 39, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 53, :y 27, :state :grassland, :altitude 64, :gradient 41, :generation 89, :rule "if state is waste then state should be grassland", :fertility 28} {:x 54, :y 27, :state :forest, :altitude 87, :gradient 59, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 55, :y 27, :state :forest, :altitude 97, :gradient 66, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 56, :y 27, :state :forest, :altitude 105, :gradient 60, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 57, :y 27, :state :forest, :altitude 111, :gradient 60, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 58, :y 27, :state :forest, :altitude 105, :gradient 63, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 59, :y 27, :state :forest, :altitude 78, :gradient 57, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 60, :y 27, :state :climax, :altitude 65, :gradient 24, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 61, :y 27, :state :climax, :altitude 59, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 30} {:x 62, :y 27, :state :climax, :altitude 50, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 63, :y 27, :state :climax, :altitude 37, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 64, :y 27, :state :climax, :altitude 31, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 65, :y 27, :state :climax, :altitude 33, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 66, :y 27, :state :climax, :altitude 37, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 67, :y 27, :state :climax, :altitude 35, :gradient 41, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 68, :y 27, :state :camp, :altitude 12, :gradient 34, :generation 89, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp"} {:x 69, :y 27, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 27, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 28, :state :water, :altitude 1, :gradient 22, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 28, :state :house, :altitude 14, :gradient 32, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 33, :y 28, :state :crop, :altitude 31, :gradient 34, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 22} {:x 34, :y 28, :state :climax, :altitude 33, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 35, :y 28, :state :climax, :altitude 36, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 36, :y 28, :state :fire, :altitude 49, :gradient 44, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 31} {:x 37, :y 28, :state :scrub, :altitude 64, :gradient 56, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 27} {:x 38, :y 28, :state :scrub, :altitude 78, :gradient 47, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 39, :y 28, :state :scrub, :altitude 63, :gradient 47, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 28} {:x 40, :y 28, :state :climax, :altitude 64, :gradient 43, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 41, :y 28, :state :scrub, :altitude 70, :gradient 43, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 39} {:x 42, :y 28, :state :waste, :altitude 79, :gradient 29, :generation 89, :rule "if state is fire then state should be waste", :fertility 42} {:x 43, :y 28, :state :forest, :altitude 92, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 44, :y 28, :state :scrub, :altitude 82, :gradient 37, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 48} {:x 45, :y 28, :state :scrub, :altitude 56, :gradient 36, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 23} {:x 46, :y 28, :state :scrub, :altitude 79, :gradient 46, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 46} {:x 47, :y 28, :state :forest, :altitude 102, :gradient 49, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 48, :y 28, :state :forest, :altitude 108, :gradient 22, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 49, :y 28, :state :forest, :altitude 97, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 50, :y 28, :state :forest, :altitude 97, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 51, :y 28, :state :forest, :altitude 97, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 52, :y 28, :state :forest, :altitude 80, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 53, :y 28, :state :forest, :altitude 78, :gradient 66, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 54, :y 28, :state :grassland, :altitude 102, :gradient 70, :generation 89, :rule "if state is waste then state should be grassland", :fertility 44} {:x 55, :y 28, :state :heath, :altitude 120, :gradient 47, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 56, :y 28, :state :heath, :altitude 131, :gradient 40, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 57, :y 28, :state :heath, :altitude 137, :gradient 35, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 58, :y 28, :state :forest, :altitude 116, :gradient 66, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 59, :y 28, :state :forest, :altitude 79, :gradient 61, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 60, :y 28, :state :climax, :altitude 59, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 61, :y 28, :state :climax, :altitude 55, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 62, :y 28, :state :climax, :altitude 60, :gradient 22, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 63, :y 28, :state :climax, :altitude 54, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 72} {:x 64, :y 28, :state :climax, :altitude 38, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 72} {:x 65, :y 28, :state :climax, :altitude 29, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 76} {:x 66, :y 28, :state :climax, :altitude 27, :gradient 35, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 75} {:x 67, :y 28, :state :climax, :altitude 17, :gradient 36, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 80} {:x 68, :y 28, :state :water, :altitude 1, :gradient 34, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 28, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 28, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 29, :state :water, :altitude 1, :gradient 16, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 29, :state :water, :altitude 1, :gradient 31, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 29, :state :climax, :altitude 23, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 33, :y 29, :state :crop, :altitude 33, :gradient 27, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 27} {:x 34, :y 29, :state :climax, :altitude 35, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 35, :y 29, :state :climax, :altitude 42, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 36, :y 29, :state :climax, :altitude 56, :gradient 47, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 37, :y 29, :state :waste, :altitude 77, :gradient 49, :generation 89, :rule "if state is fire then state should be waste", :fertility 39} {:x 38, :y 29, :state :forest, :altitude 97, :gradient 35, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 26} {:x 39, :y 29, :state :forest, :altitude 70, :gradient 35, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 40, :y 29, :state :climax, :altitude 68, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 41, :y 29, :state :forest, :altitude 93, :gradient 36, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 42, :y 29, :state :forest, :altitude 93, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 43, :y 29, :state :scrub, :altitude 91, :gradient 16, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 39} {:x 44, :y 29, :state :forest, :altitude 77, :gradient 36, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 45, :y 29, :state :scrub, :altitude 57, :gradient 26, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 43} {:x 46, :y 29, :state :scrub, :altitude 82, :gradient 46, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 45} {:x 47, :y 29, :state :forest, :altitude 101, :gradient 38, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 48, :y 29, :state :forest, :altitude 108, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 49, :y 29, :state :forest, :altitude 105, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 50, :y 29, :state :forest, :altitude 106, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 51, :y 29, :state :forest, :altitude 106, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 52, :y 29, :state :forest, :altitude 92, :gradient 53, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 53, :y 29, :state :forest, :altitude 106, :gradient 55, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 54, :y 29, :state :heath, :altitude 130, :gradient 56, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 55, :y 29, :state :heath, :altitude 134, :gradient 44, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 56, :y 29, :state :heath, :altitude 121, :gradient 57, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 57, :y 29, :state :forest, :altitude 114, :gradient 69, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 58, :y 29, :state :forest, :altitude 96, :gradient 80, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 59, :y 29, :state :forest, :altitude 71, :gradient 64, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 60, :y 29, :state :climax, :altitude 55, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 61, :y 29, :state :climax, :altitude 49, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 62, :y 29, :state :climax, :altitude 54, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 63, :y 29, :state :climax, :altitude 57, :gradient 22, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 64, :y 29, :state :climax, :altitude 45, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 65, :y 29, :state :climax, :altitude 33, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 66, :y 29, :state :climax, :altitude 19, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 67, :y 29, :state :water, :altitude 2, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 29, :state :water, :altitude 1, :gradient 16, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 29, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 30, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 30, :state :water, :altitude 1, :gradient 28, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 30, :state :grassland, :altitude 17, :gradient 35, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 53} {:x 32, :y 30, :state :climax, :altitude 32, :gradient 39, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 33, :y 30, :state :climax, :altitude 35, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 34, :y 30, :state :climax, :altitude 41, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 35, :y 30, :state :climax, :altitude 51, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 36, :y 30, :state :heath, :altitude 61, :gradient 41, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 35} {:x 37, :y 30, :state :heath, :altitude 83, :gradient 42, :generation 89, :rule "if state is waste and some neighbours are forest then state should be heath", :fertility 34} {:x 38, :y 30, :state :fire, :altitude 98, :gradient 27, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 45} {:x 39, :y 30, :state :forest, :altitude 75, :gradient 39, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 40, :y 30, :state :forest, :altitude 82, :gradient 39, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 41, :y 30, :state :forest, :altitude 100, :gradient 39, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 42, :y 30, :state :forest, :altitude 92, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 43, :y 30, :state :forest, :altitude 87, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 44, :y 30, :state :forest, :altitude 80, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 45, :y 30, :state :climax, :altitude 61, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 46, :y 30, :state :forest, :altitude 70, :gradient 44, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 45} {:x 47, :y 30, :state :forest, :altitude 80, :gradient 38, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 48, :y 30, :state :forest, :altitude 89, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 49, :y 30, :state :forest, :altitude 101, :gradient 24, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 50, :y 30, :state :forest, :altitude 112, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 51, :y 30, :state :forest, :altitude 114, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 52, :y 30, :state :forest, :altitude 114, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 23} {:x 53, :y 30, :state :heath, :altitude 131, :gradient 42, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 54, :y 30, :state :heath, :altitude 133, :gradient 51, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 55, :y 30, :state :forest, :altitude 108, :gradient 60, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 56, :y 30, :state :forest, :altitude 89, :gradient 60, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 24} {:x 57, :y 30, :state :forest, :altitude 80, :gradient 53, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 76} {:x 58, :y 30, :state :climax, :altitude 68, :gradient 57, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 59, :y 30, :state :climax, :altitude 57, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 60, :y 30, :state :climax, :altitude 52, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 61, :y 30, :state :scrub, :altitude 46, :gradient 14, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 42} {:x 62, :y 30, :state :climax, :altitude 49, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 70} {:x 63, :y 30, :state :climax, :altitude 52, :gradient 24, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 64, :y 30, :state :climax, :altitude 45, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 65, :y 30, :state :climax, :altitude 31, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 76} {:x 66, :y 30, :state :climax, :altitude 13, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 79} {:x 67, :y 30, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 30, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 30, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 31, :state :water, :altitude 1, :gradient 23, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 31, :state :house, :altitude 12, :gradient 35, :generation 89, :rule "if state is in camp or abandoned and some neighbours are crop then state should be house", :fertility 1} {:x 31, :y 31, :state :climax, :altitude 29, :gradient 39, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 32, :y 31, :state :forest, :altitude 36, :gradient 29, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 35} {:x 33, :y 31, :state :climax, :altitude 40, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 34, :y 31, :state :fire, :altitude 43, :gradient 19, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 52} {:x 35, :y 31, :state :heath, :altitude 51, :gradient 23, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 44} {:x 36, :y 31, :state :scrub, :altitude 56, :gradient 32, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 9} {:x 37, :y 31, :state :scrub, :altitude 77, :gradient 42, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 63} {:x 38, :y 31, :state :heath, :altitude 97, :gradient 40, :generation 89, :rule "if state is waste and some neighbours are forest then state should be heath", :fertility 50} {:x 39, :y 31, :state :forest, :altitude 97, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 17} {:x 40, :y 31, :state :forest, :altitude 107, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 41, :y 31, :state :forest, :altitude 97, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 24} {:x 42, :y 31, :state :forest, :altitude 83, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 43, :y 31, :state :forest, :altitude 77, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 26} {:x 44, :y 31, :state :climax, :altitude 64, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 45, :y 31, :state :climax, :altitude 65, :gradient 35, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 46, :y 31, :state :forest, :altitude 83, :gradient 50, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 32} {:x 47, :y 31, :state :forest, :altitude 89, :gradient 47, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 48, :y 31, :state :forest, :altitude 88, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 49, :y 31, :state :forest, :altitude 94, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 50, :y 31, :state :forest, :altitude 108, :gradient 43, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 51, :y 31, :state :heath, :altitude 126, :gradient 29, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 52, :y 31, :state :heath, :altitude 134, :gradient 36, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 53, :y 31, :state :heath, :altitude 120, :gradient 45, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 54, :y 31, :state :forest, :altitude 98, :gradient 50, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 55, :y 31, :state :forest, :altitude 83, :gradient 59, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 56, :y 31, :state :forest, :altitude 74, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 79} {:x 57, :y 31, :state :forest, :altitude 75, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 58, :y 31, :state :forest, :altitude 73, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 59, :y 31, :state :climax, :altitude 57, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 60, :y 31, :state :climax, :altitude 57, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 61, :y 31, :state :climax, :altitude 50, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 62, :y 31, :state :scrub, :altitude 43, :gradient 12, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 56} {:x 63, :y 31, :state :climax, :altitude 45, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 64, :y 31, :state :climax, :altitude 33, :gradient 51, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 65, :y 31, :state :climax, :altitude 20, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 66, :y 31, :state :water, :altitude 1, :gradient 30, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 31, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 31, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 32, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 32, :state :water, :altitude 1, :gradient 37, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 32, :state :grassland, :altitude 24, :gradient 42, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 52} {:x 31, :y 32, :state :pasture, :altitude 36, :gradient 31, :generation 89, :rule "if state is in grassland or heath and some neighbours are camp then 1 chance in 2 state should be pasture", :fertility 37} {:x 32, :y 32, :state :climax, :altitude 40, :gradient 22, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 71} {:x 33, :y 32, :state :fire, :altitude 46, :gradient 15, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 28} {:x 34, :y 32, :state :waste, :altitude 46, :gradient 17, :generation 89, :rule "if state is fire then state should be waste", :fertility 27} {:x 35, :y 32, :state :heath, :altitude 54, :gradient 37, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 48} {:x 36, :y 32, :state :scrub, :altitude 64, :gradient 52, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 17} {:x 37, :y 32, :state :forest, :altitude 75, :gradient 52, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 38, :y 32, :state :fire, :altitude 96, :gradient 40, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 65} {:x 39, :y 32, :state :waste, :altitude 115, :gradient 15, :generation 89, :rule "if state is fire then state should be waste", :fertility 39} {:x 40, :y 32, :state :forest, :altitude 111, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 26} {:x 41, :y 32, :state :forest, :altitude 89, :gradient 36, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 42, :y 32, :state :forest, :altitude 79, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 43, :y 32, :state :forest, :altitude 71, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 44, :y 32, :state :forest, :altitude 70, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 45, :y 32, :state :forest, :altitude 82, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 46, :y 32, :state :forest, :altitude 96, :gradient 52, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 47, :y 32, :state :forest, :altitude 111, :gradient 60, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 48, :y 32, :state :forest, :altitude 117, :gradient 59, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 74} {:x 49, :y 32, :state :forest, :altitude 117, :gradient 59, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 50, :y 32, :state :forest, :altitude 117, :gradient 53, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 51, :y 32, :state :heath, :altitude 137, :gradient 26, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 52, :y 32, :state :heath, :altitude 131, :gradient 36, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 53, :y 32, :state :forest, :altitude 101, :gradient 45, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 75} {:x 54, :y 32, :state :forest, :altitude 89, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 75} {:x 55, :y 32, :state :forest, :altitude 87, :gradient 43, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 56, :y 32, :state :forest, :altitude 96, :gradient 43, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 80} {:x 57, :y 32, :state :forest, :altitude 94, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 58, :y 32, :state :forest, :altitude 82, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 59, :y 32, :state :climax, :altitude 57, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 60, :y 32, :state :climax, :altitude 52, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 61, :y 32, :state :climax, :altitude 43, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 62, :y 32, :state :climax, :altitude 40, :gradient 24, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 63, :y 32, :state :climax, :altitude 41, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 70} {:x 64, :y 32, :state :climax, :altitude 19, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 65, :y 32, :state :water, :altitude 1, :gradient 32, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 32, :state :water, :altitude 1, :gradient 19, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 32, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 33, :state :water, :altitude 1, :gradient 16, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 33, :state :water, :altitude 1, :gradient 40, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 33, :state :climax, :altitude 18, :gradient 45, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 30, :y 33, :state :climax, :altitude 38, :gradient 51, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 56} {:x 31, :y 33, :state :scrub, :altitude 43, :gradient 28, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 45} {:x 32, :y 33, :state :climax, :altitude 43, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 29} {:x 33, :y 33, :state :climax, :altitude 51, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 26} {:x 34, :y 33, :state :heath, :altitude 49, :gradient 14, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 20} {:x 35, :y 33, :state :scrub, :altitude 57, :gradient 34, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 43} {:x 36, :y 33, :state :forest, :altitude 80, :gradient 56, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 33} {:x 37, :y 33, :state :scrub, :altitude 103, :gradient 62, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 38, :y 33, :state :forest, :altitude 108, :gradient 51, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 39, :y 33, :state :forest, :altitude 111, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 40, :y 33, :state :forest, :altitude 96, :gradient 36, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 29} {:x 41, :y 33, :state :forest, :altitude 82, :gradient 36, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 42, :y 33, :state :forest, :altitude 75, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 43, :y 33, :state :forest, :altitude 71, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 31} {:x 44, :y 33, :state :scrub, :altitude 74, :gradient 19, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 56} {:x 45, :y 33, :state :forest, :altitude 84, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 46, :y 33, :state :forest, :altitude 96, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 47, :y 33, :state :forest, :altitude 117, :gradient 59, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 48, :y 33, :state :heath, :altitude 143, :gradient 40, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 49, :y 33, :state :heath, :altitude 147, :gradient 37, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 50, :y 33, :state :heath, :altitude 126, :gradient 33, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 51, :y 33, :state :heath, :altitude 131, :gradient 23, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 52, :y 33, :state :heath, :altitude 124, :gradient 36, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 53, :y 33, :state :forest, :altitude 110, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 54, :y 33, :state :forest, :altitude 115, :gradient 41, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 55, :y 33, :state :forest, :altitude 115, :gradient 41, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 56, :y 33, :state :forest, :altitude 117, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 57, :y 33, :state :forest, :altitude 101, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 58, :y 33, :state :forest, :altitude 77, :gradient 53, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 59, :y 33, :state :climax, :altitude 57, :gradient 35, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 51} {:x 60, :y 33, :state :climax, :altitude 59, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 61, :y 33, :state :climax, :altitude 56, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 62, :y 33, :state :climax, :altitude 40, :gradient 47, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 63, :y 33, :state :climax, :altitude 32, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 64, :y 33, :state :camp, :altitude 12, :gradient 40, :generation 89, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp", :fertility 59} {:x 65, :y 33, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 33, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 34, :state :water, :altitude 1, :gradient 16, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 34, :state :water, :altitude 1, :gradient 36, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 34, :state :climax, :altitude 17, :gradient 50, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 29, :y 34, :state :scrub, :altitude 41, :gradient 55, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 30, :y 34, :state :forest, :altitude 46, :gradient 38, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 64} {:x 31, :y 34, :state :climax, :altitude 52, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 32, :y 34, :state :climax, :altitude 46, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 33, :y 34, :state :climax, :altitude 49, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 34, :y 34, :state :climax, :altitude 55, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 35, :y 34, :state :climax, :altitude 60, :gradient 53, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 32} {:x 36, :y 34, :state :forest, :altitude 79, :gradient 59, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 37, :y 34, :state :scrub, :altitude 110, :gradient 47, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 41} {:x 38, :y 34, :state :heath, :altitude 126, :gradient 16, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 39, :y 34, :state :forest, :altitude 106, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 40, :y 34, :state :forest, :altitude 86, :gradient 32, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 47} {:x 41, :y 34, :state :forest, :altitude 79, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 29} {:x 42, :y 34, :state :forest, :altitude 79, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 43, :y 34, :state :forest, :altitude 79, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 44, :y 34, :state :forest, :altitude 89, :gradient 36, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 45, :y 34, :state :forest, :altitude 89, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 46, :y 34, :state :forest, :altitude 92, :gradient 38, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 47, :y 34, :state :heath, :altitude 122, :gradient 59, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 48, :y 34, :state :heath, :altitude 151, :gradient 35, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 49, :y 34, :state :heath, :altitude 143, :gradient 57, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 50, :y 34, :state :forest, :altitude 114, :gradient 60, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 71} {:x 51, :y 34, :state :forest, :altitude 116, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 52, :y 34, :state :heath, :altitude 124, :gradient 44, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 53, :y 34, :state :heath, :altitude 124, :gradient 31, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 54, :y 34, :state :heath, :altitude 128, :gradient 23, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 55, :y 34, :state :forest, :altitude 119, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 56, :y 34, :state :forest, :altitude 119, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 25} {:x 57, :y 34, :state :forest, :altitude 110, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 73} {:x 58, :y 34, :state :forest, :altitude 87, :gradient 53, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 59, :y 34, :state :pasture, :altitude 66, :gradient 35, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 37} {:x 60, :y 34, :state :house, :altitude 66, :gradient 15, :generation 89, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 36} {:x 61, :y 34, :state :crop, :altitude 66, :gradient 38, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 50} {:x 62, :y 34, :state :climax, :altitude 41, :gradient 65, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 63, :y 34, :state :climax, :altitude 19, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 74} {:x 64, :y 34, :state :water, :altitude 1, :gradient 31, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 34, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 34, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 35, :state :water, :altitude 1, :gradient 16, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 35, :state :water, :altitude 1, :gradient 36, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 35, :state :scrub, :altitude 17, :gradient 51, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 58} {:x 28, :y 35, :state :heath, :altitude 37, :gradient 58, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 67} {:x 29, :y 35, :state :climax, :altitude 51, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 30, :y 35, :state :climax, :altitude 56, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 31, :y 35, :state :scrub, :altitude 55, :gradient 15, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 32} {:x 32, :y 35, :state :climax, :altitude 47, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 33, :y 35, :state :climax, :altitude 51, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 34, :y 35, :state :climax, :altitude 68, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 35, :y 35, :state :forest, :altitude 82, :gradient 57, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 36, :y 35, :state :forest, :altitude 102, :gradient 62, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 37, :y 35, :state :scrub, :altitude 116, :gradient 47, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 50} {:x 38, :y 35, :state :scrub, :altitude 119, :gradient 28, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 65} {:x 39, :y 35, :state :forest, :altitude 103, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 40, :y 35, :state :forest, :altitude 86, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 41, :y 35, :state :scrub, :altitude 89, :gradient 28, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 20} {:x 42, :y 35, :state :forest, :altitude 94, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 43, :y 35, :state :scrub, :altitude 93, :gradient 32, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 44, :y 35, :state :forest, :altitude 103, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 45, :y 35, :state :forest, :altitude 107, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 46, :y 35, :state :forest, :altitude 94, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 47, :y 35, :state :forest, :altitude 112, :gradient 59, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 74} {:x 48, :y 35, :state :heath, :altitude 134, :gradient 41, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 49, :y 35, :state :forest, :altitude 117, :gradient 57, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 50, :y 35, :state :forest, :altitude 94, :gradient 56, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 51, :y 35, :state :forest, :altitude 87, :gradient 45, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 52, :y 35, :state :forest, :altitude 97, :gradient 53, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 53, :y 35, :state :forest, :altitude 107, :gradient 57, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 21} {:x 54, :y 35, :state :forest, :altitude 115, :gradient 57, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 55, :y 35, :state :forest, :altitude 101, :gradient 49, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 56, :y 35, :state :forest, :altitude 102, :gradient 39, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 57, :y 35, :state :forest, :altitude 110, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 58, :y 35, :state :forest, :altitude 92, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 59, :y 35, :state :pasture, :altitude 71, :gradient 41, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 43} {:x 60, :y 35, :state :ploughland, :altitude 63, :gradient 43, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 44} {:x 61, :y 35, :state :crop, :altitude 57, :gradient 53, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 34} {:x 62, :y 35, :state :pasture, :altitude 28, :gradient 65, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 63, :y 35, :state :water, :altitude 1, :gradient 40, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 35, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 35, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 36, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 36, :state :water, :altitude 1, :gradient 34, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 36, :state :forest, :altitude 17, :gradient 42, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 48} {:x 27, :y 36, :state :scrub, :altitude 37, :gradient 51, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 49} {:x 28, :y 36, :state :climax, :altitude 52, :gradient 48, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 29, :y 36, :state :climax, :altitude 59, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 30, :y 36, :state :scrub, :altitude 61, :gradient 14, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 61} {:x 31, :y 36, :state :climax, :altitude 56, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 32, :y 36, :state :climax, :altitude 50, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 33, :y 36, :state :forest, :altitude 61, :gradient 31, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 29} {:x 34, :y 36, :state :forest, :altitude 77, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 35, :y 36, :state :waste, :altitude 91, :gradient 44, :generation 89, :rule "if state is fire then state should be waste", :fertility 29} {:x 36, :y 36, :state :forest, :altitude 112, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 37, :y 36, :state :heath, :altitude 122, :gradient 30, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 38, :y 36, :state :scrub, :altitude 114, :gradient 24, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 39, :y 36, :state :forest, :altitude 98, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 32} {:x 40, :y 36, :state :forest, :altitude 93, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 41, :y 36, :state :scrub, :altitude 100, :gradient 29, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 51} {:x 42, :y 36, :state :forest, :altitude 107, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 43, :y 36, :state :forest, :altitude 106, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 44, :y 36, :state :forest, :altitude 111, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 45, :y 36, :state :forest, :altitude 116, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 46, :y 36, :state :forest, :altitude 112, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 47, :y 36, :state :forest, :altitude 110, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 77} {:x 48, :y 36, :state :forest, :altitude 119, :gradient 24, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 49, :y 36, :state :heath, :altitude 120, :gradient 40, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 50, :y 36, :state :forest, :altitude 110, :gradient 43, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 51, :y 36, :state :forest, :altitude 94, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 52, :y 36, :state :forest, :altitude 79, :gradient 38, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 53, :y 36, :state :scrub, :altitude 71, :gradient 60, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 33} {:x 54, :y 36, :state :forest, :altitude 79, :gradient 60, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 55, :y 36, :state :forest, :altitude 80, :gradient 60, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 56, :y 36, :state :forest, :altitude 88, :gradient 46, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 57, :y 36, :state :forest, :altitude 94, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 20} {:x 58, :y 36, :state :forest, :altitude 86, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 59, :y 36, :state :crop, :altitude 68, :gradient 52, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 50} {:x 60, :y 36, :state :grassland, :altitude 51, :gradient 60, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 38} {:x 61, :y 36, :state :house, :altitude 28, :gradient 62, :generation 89, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 16} {:x 62, :y 36, :state :house, :altitude 13, :gradient 56, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 63, :y 36, :state :water, :altitude 1, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 36, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 37, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 37, :state :water, :altitude 1, :gradient 34, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 37, :state :scrub, :altitude 15, :gradient 42, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 39} {:x 26, :y 37, :state :climax, :altitude 35, :gradient 54, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 52} {:x 27, :y 37, :state :scrub, :altitude 43, :gradient 40, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 45} {:x 28, :y 37, :state :climax, :altitude 52, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 29, :y 37, :state :climax, :altitude 65, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 30, :y 37, :state :climax, :altitude 65, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 31, :y 37, :state :scrub, :altitude 60, :gradient 25, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 47} {:x 32, :y 37, :state :scrub, :altitude 61, :gradient 25, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 51} {:x 33, :y 37, :state :forest, :altitude 74, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 34, :y 37, :state :forest, :altitude 78, :gradient 30, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 42} {:x 35, :y 37, :state :waste, :altitude 78, :gradient 38, :generation 89, :rule "if state is fire then state should be waste", :fertility 45} {:x 36, :y 37, :state :heath, :altitude 89, :gradient 44, :generation 89, :rule "if state is waste and some neighbours are forest then state should be heath", :fertility 44} {:x 37, :y 37, :state :scrub, :altitude 98, :gradient 39, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 52} {:x 38, :y 37, :state :fire, :altitude 101, :gradient 35, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 51} {:x 39, :y 37, :state :scrub, :altitude 112, :gradient 24, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 49} {:x 40, :y 37, :state :forest, :altitude 110, :gradient 24, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 41, :y 37, :state :forest, :altitude 112, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 42, :y 37, :state :forest, :altitude 115, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 43, :y 37, :state :forest, :altitude 119, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 44, :y 37, :state :heath, :altitude 122, :gradient 27, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 45, :y 37, :state :heath, :altitude 133, :gradient 23, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 46, :y 37, :state :heath, :altitude 134, :gradient 23, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 47, :y 37, :state :heath, :altitude 120, :gradient 24, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 48, :y 37, :state :heath, :altitude 124, :gradient 20, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 49, :y 37, :state :heath, :altitude 130, :gradient 38, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 50, :y 37, :state :forest, :altitude 112, :gradient 47, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 51, :y 37, :state :forest, :altitude 103, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 52, :y 37, :state :scrub, :altitude 91, :gradient 34, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 17} {:x 53, :y 37, :state :climax, :altitude 69, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 54, :y 37, :state :climax, :altitude 55, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 55, :y 37, :state :climax, :altitude 64, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 56, :y 37, :state :forest, :altitude 78, :gradient 43, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 57, :y 37, :state :forest, :altitude 80, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 19} {:x 58, :y 37, :state :scrub, :altitude 83, :gradient 29, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 46} {:x 59, :y 37, :state :crop, :altitude 73, :gradient 46, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 41} {:x 60, :y 37, :state :house, :altitude 40, :gradient 71, :generation 89, :rule "if state is house and some neighbours are ploughland then state should be house", :fertility 27} {:x 61, :y 37, :state :house, :altitude 13, :gradient 50, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 46} {:x 62, :y 37, :state :water, :altitude 1, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 37, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 37, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 38, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 38, :state :water, :altitude 1, :gradient 23, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 38, :state :climax, :altitude 14, :gradient 36, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 73} {:x 25, :y 38, :state :scrub, :altitude 35, :gradient 51, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 69} {:x 26, :y 38, :state :climax, :altitude 43, :gradient 48, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 27, :y 38, :state :climax, :altitude 55, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 31} {:x 28, :y 38, :state :climax, :altitude 57, :gradient 22, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 33} {:x 29, :y 38, :state :climax, :altitude 63, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 30, :y 38, :state :scrub, :altitude 64, :gradient 19, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 32} {:x 31, :y 38, :state :scrub, :altitude 68, :gradient 20, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 46} {:x 32, :y 38, :state :scrub, :altitude 75, :gradient 20, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 40} {:x 33, :y 38, :state :forest, :altitude 73, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 34, :y 38, :state :scrub, :altitude 74, :gradient 20, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 32} {:x 35, :y 38, :state :forest, :altitude 79, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 36, :y 38, :state :fire, :altitude 83, :gradient 27, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 46} {:x 37, :y 38, :state :waste, :altitude 87, :gradient 29, :generation 89, :rule "if state is fire then state should be waste", :fertility 66} {:x 38, :y 38, :state :forest, :altitude 102, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 39, :y 38, :state :forest, :altitude 117, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 72} {:x 40, :y 38, :state :forest, :altitude 116, :gradient 24, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 41, :y 38, :state :forest, :altitude 112, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 42, :y 38, :state :forest, :altitude 100, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 43, :y 38, :state :forest, :altitude 114, :gradient 35, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 44, :y 38, :state :heath, :altitude 126, :gradient 40, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 45, :y 38, :state :heath, :altitude 129, :gradient 41, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 46, :y 38, :state :heath, :altitude 122, :gradient 41, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 47, :y 38, :state :heath, :altitude 121, :gradient 41, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 48, :y 38, :state :heath, :altitude 130, :gradient 39, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 49, :y 38, :state :forest, :altitude 115, :gradient 51, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 50, :y 38, :state :forest, :altitude 92, :gradient 60, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 51, :y 38, :state :forest, :altitude 83, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 52, :y 38, :state :forest, :altitude 84, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 53, :y 38, :state :forest, :altitude 75, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 54, :y 38, :state :scrub, :altitude 54, :gradient 32, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 35} {:x 55, :y 38, :state :climax, :altitude 51, :gradient 35, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 56, :y 38, :state :scrub, :altitude 65, :gradient 37, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 44} {:x 57, :y 38, :state :climax, :altitude 68, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 58, :y 38, :state :forest, :altitude 73, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 59, :y 38, :state :crop, :altitude 65, :gradient 48, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 21} {:x 60, :y 38, :state :camp, :altitude 43, :gradient 71, :generation 89, :rule "if state is camp and some neighbours are ploughland then state should be camp", :fertility 21} {:x 61, :y 38, :state :water, :altitude 2, :gradient 42, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 38, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 38, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 39, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 39, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 39, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 39, :state :water, :altitude 1, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 39, :state :water, :altitude 1, :gradient 35, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 39, :state :climax, :altitude 13, :gradient 35, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 24, :y 39, :state :scrub, :altitude 24, :gradient 39, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 51} {:x 25, :y 39, :state :scrub, :altitude 37, :gradient 43, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 61} {:x 26, :y 39, :state :climax, :altitude 52, :gradient 28, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 57} {:x 27, :y 39, :state :climax, :altitude 63, :gradient 20, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 43} {:x 28, :y 39, :state :climax, :altitude 63, :gradient 9, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 52} {:x 29, :y 39, :state :forest, :altitude 64, :gradient 11, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 51} {:x 30, :y 39, :state :waste, :altitude 65, :gradient 18, :generation 89, :rule "if state is fire then state should be waste", :fertility 55} {:x 31, :y 39, :state :heath, :altitude 79, :gradient 16, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 61} {:x 32, :y 39, :state :forest, :altitude 80, :gradient 11, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 51} {:x 33, :y 39, :state :scrub, :altitude 68, :gradient 12, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 34, :y 39, :state :scrub, :altitude 77, :gradient 20, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 63} {:x 35, :y 39, :state :forest, :altitude 88, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 22} {:x 36, :y 39, :state :scrub, :altitude 93, :gradient 33, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 53} {:x 37, :y 39, :state :fire, :altitude 105, :gradient 42, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 69} {:x 38, :y 39, :state :forest, :altitude 112, :gradient 38, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 39, :y 39, :state :forest, :altitude 105, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 40, :y 39, :state :forest, :altitude 101, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 41, :y 39, :state :forest, :altitude 93, :gradient 41, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 42, :y 39, :state :forest, :altitude 91, :gradient 47, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 43, :y 39, :state :forest, :altitude 119, :gradient 35, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 44, :y 39, :state :heath, :altitude 120, :gradient 52, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 45, :y 39, :state :waste, :altitude 93, :gradient 52, :generation 89, :rule "if state is fire then state should be waste", :fertility 64} {:x 46, :y 39, :state :fire, :altitude 93, :gradient 52, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 63} {:x 47, :y 39, :state :forest, :altitude 116, :gradient 38, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 48, :y 39, :state :forest, :altitude 116, :gradient 51, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 49, :y 39, :state :forest, :altitude 91, :gradient 62, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 50, :y 39, :state :forest, :altitude 79, :gradient 54, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 51, :y 39, :state :forest, :altitude 70, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 23} {:x 52, :y 39, :state :forest, :altitude 75, :gradient 24, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 53, :y 39, :state :forest, :altitude 75, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 54, :y 39, :state :climax, :altitude 61, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 31} {:x 55, :y 39, :state :climax, :altitude 43, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 56, :y 39, :state :climax, :altitude 51, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 57, :y 39, :state :climax, :altitude 59, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 58, :y 39, :state :pasture, :altitude 64, :gradient 31, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 60} {:x 59, :y 39, :state :ploughland, :altitude 57, :gradient 54, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 49} {:x 60, :y 39, :state :climax, :altitude 35, :gradient 64, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 61, :y 39, :state :water, :altitude 2, :gradient 42, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 39, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 39, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 40, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 40, :state :water, :altitude 2, :gradient 22, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 40, :state :water, :altitude 2, :gradient 23, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 40, :state :water, :altitude 2, :gradient 37, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 40, :state :fire, :altitude 27, :gradient 37, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 67} {:x 23, :y 40, :state :waste, :altitude 36, :gradient 37, :generation 89, :rule "if state is fire then state should be waste", :fertility 25} {:x 24, :y 40, :state :scrub, :altitude 35, :gradient 27, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 23} {:x 25, :y 40, :state :scrub, :altitude 40, :gradient 33, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 55} {:x 26, :y 40, :state :forest, :altitude 57, :gradient 26, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 31} {:x 27, :y 40, :state :climax, :altitude 60, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 28} {:x 28, :y 40, :state :scrub, :altitude 63, :gradient 5, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 31} {:x 29, :y 40, :state :scrub, :altitude 61, :gradient 11, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 14} {:x 30, :y 40, :state :climax, :altitude 68, :gradient 22, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 31, :y 40, :state :fire, :altitude 77, :gradient 23, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 51} {:x 32, :y 40, :state :forest, :altitude 69, :gradient 16, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 33} {:x 33, :y 40, :state :heath, :altitude 68, :gradient 12, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 54} {:x 34, :y 40, :state :fire, :altitude 74, :gradient 20, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 53} {:x 35, :y 40, :state :forest, :altitude 84, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 36, :y 40, :state :scrub, :altitude 97, :gradient 28, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 37, :y 40, :state :forest, :altitude 112, :gradient 36, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 38, :y 40, :state :heath, :altitude 125, :gradient 24, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 39, :y 40, :state :forest, :altitude 116, :gradient 35, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 40, :y 40, :state :forest, :altitude 94, :gradient 45, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 41, :y 40, :state :forest, :altitude 75, :gradient 24, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 42, :y 40, :state :forest, :altitude 94, :gradient 47, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 43, :y 40, :state :heath, :altitude 122, :gradient 43, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 44, :y 40, :state :heath, :altitude 102, :gradient 51, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 60} {:x 45, :y 40, :state :scrub, :altitude 77, :gradient 49, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 63} {:x 46, :y 40, :state :heath, :altitude 92, :gradient 45, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 48} {:x 47, :y 40, :state :forest, :altitude 110, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 48, :y 40, :state :scrub, :altitude 105, :gradient 37, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 42} {:x 49, :y 40, :state :forest, :altitude 79, :gradient 48, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 50, :y 40, :state :climax, :altitude 68, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 51, :y 40, :state :climax, :altitude 61, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 52, :y 40, :state :climax, :altitude 61, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 53, :y 40, :state :climax, :altitude 60, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 28} {:x 54, :y 40, :state :climax, :altitude 52, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 22} {:x 55, :y 40, :state :climax, :altitude 41, :gradient 21, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 34} {:x 56, :y 40, :state :climax, :altitude 40, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 57, :y 40, :state :climax, :altitude 47, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 58, :y 40, :state :pasture, :altitude 55, :gradient 41, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 56} {:x 59, :y 40, :state :grassland, :altitude 42, :gradient 52, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 36} {:x 60, :y 40, :state :grassland, :altitude 19, :gradient 56, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 37} {:x 61, :y 40, :state :water, :altitude 1, :gradient 34, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 40, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 40, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 41, :state :water, :altitude 1, :gradient 22, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 41, :state :water, :altitude 1, :gradient 37, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 41, :state :camp, :altitude 19, :gradient 37, :generation 89, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp", :fertility 48} {:x 20, :y 41, :state :waste, :altitude 23, :gradient 36, :generation 89, :rule "if state is fire then state should be waste", :fertility 30} {:x 21, :y 41, :state :fire, :altitude 24, :gradient 36, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 58} {:x 22, :y 41, :state :scrub, :altitude 38, :gradient 36, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 50} {:x 23, :y 41, :state :waste, :altitude 38, :gradient 11, :generation 89, :rule "if state is fire then state should be waste", :fertility 46} {:x 24, :y 41, :state :heath, :altitude 36, :gradient 5, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 42} {:x 25, :y 41, :state :scrub, :altitude 40, :gradient 22, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 56} {:x 26, :y 41, :state :scrub, :altitude 56, :gradient 20, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 53} {:x 27, :y 41, :state :scrub, :altitude 59, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 55} {:x 28, :y 41, :state :scrub, :altitude 63, :gradient 8, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 57} {:x 29, :y 41, :state :heath, :altitude 59, :gradient 19, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 37} {:x 30, :y 41, :state :heath, :altitude 57, :gradient 20, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 56} {:x 31, :y 41, :state :climax, :altitude 64, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 32, :y 41, :state :climax, :altitude 69, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 33, :y 41, :state :scrub, :altitude 69, :gradient 19, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 43} {:x 34, :y 41, :state :heath, :altitude 74, :gradient 16, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 58} {:x 35, :y 41, :state :waste, :altitude 84, :gradient 31, :generation 89, :rule "if state is fire then state should be waste", :fertility 52} {:x 36, :y 41, :state :forest, :altitude 94, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 37, :y 41, :state :scrub, :altitude 111, :gradient 35, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 18} {:x 38, :y 41, :state :heath, :altitude 129, :gradient 17, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 39, :y 41, :state :heath, :altitude 120, :gradient 35, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 40, :y 41, :state :forest, :altitude 96, :gradient 45, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 41, :y 41, :state :forest, :altitude 77, :gradient 38, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 42, :y 41, :state :forest, :altitude 77, :gradient 57, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 31} {:x 43, :y 41, :state :forest, :altitude 97, :gradient 57, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 44, :y 41, :state :forest, :altitude 83, :gradient 53, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 45, :y 41, :state :scrub, :altitude 71, :gradient 33, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 46, :y 41, :state :heath, :altitude 87, :gradient 42, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 52} {:x 47, :y 41, :state :forest, :altitude 106, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 48, :y 41, :state :forest, :altitude 115, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 49, :y 41, :state :forest, :altitude 93, :gradient 47, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 50, :y 41, :state :forest, :altitude 74, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 21} {:x 51, :y 41, :state :climax, :altitude 60, :gradient 24, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 52, :y 41, :state :climax, :altitude 50, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 53, :y 41, :state :climax, :altitude 50, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 31} {:x 54, :y 41, :state :climax, :altitude 57, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 21} {:x 55, :y 41, :state :climax, :altitude 52, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 12} {:x 56, :y 41, :state :pasture, :altitude 41, :gradient 33, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 52} {:x 57, :y 41, :state :climax, :altitude 33, :gradient 43, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 58, :y 41, :state :pasture, :altitude 37, :gradient 54, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 29} {:x 59, :y 41, :state :climax, :altitude 23, :gradient 54, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 72} {:x 60, :y 41, :state :house, :altitude 12, :gradient 41, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 61, :y 41, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 41, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 42, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 42, :state :water, :altitude 1, :gradient 46, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 42, :state :climax, :altitude 23, :gradient 46, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 19, :y 42, :state :fire, :altitude 38, :gradient 46, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 54} {:x 20, :y 42, :state :climax, :altitude 29, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 21, :y 42, :state :heath, :altitude 33, :gradient 15, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 35} {:x 22, :y 42, :state :climax, :altitude 36, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 23, :y 42, :state :scrub, :altitude 36, :gradient 6, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 56} {:x 24, :y 42, :state :scrub, :altitude 36, :gradient 7, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 36} {:x 25, :y 42, :state :scrub, :altitude 40, :gradient 20, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 53} {:x 26, :y 42, :state :heath, :altitude 54, :gradient 19, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 61} {:x 27, :y 42, :state :climax, :altitude 56, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 28, :y 42, :state :forest, :altitude 55, :gradient 24, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 66} {:x 29, :y 42, :state :scrub, :altitude 60, :gradient 40, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 34} {:x 30, :y 42, :state :scrub, :altitude 74, :gradient 34, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 50} {:x 31, :y 42, :state :waste, :altitude 79, :gradient 34, :generation 89, :rule "if state is fire then state should be waste", :fertility 40} {:x 32, :y 42, :state :waste, :altitude 87, :gradient 30, :generation 89, :rule "if state is fire then state should be waste", :fertility 41} {:x 33, :y 42, :state :heath, :altitude 84, :gradient 25, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 44} {:x 34, :y 42, :state :forest, :altitude 78, :gradient 25, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 51} {:x 35, :y 42, :state :waste, :altitude 84, :gradient 41, :generation 89, :rule "if state is fire then state should be waste", :fertility 64} {:x 36, :y 42, :state :fire, :altitude 105, :gradient 31, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 35} {:x 37, :y 42, :state :forest, :altitude 112, :gradient 38, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 38, :y 42, :state :forest, :altitude 108, :gradient 38, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 50} {:x 39, :y 42, :state :scrub, :altitude 119, :gradient 41, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 41} {:x 40, :y 42, :state :forest, :altitude 103, :gradient 55, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 41, :y 42, :state :forest, :altitude 77, :gradient 38, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 42, :y 42, :state :climax, :altitude 65, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 43, :y 42, :state :heath, :altitude 80, :gradient 37, :generation 89, :rule "if state is waste and some neighbours are forest then state should be heath", :fertility 46} {:x 44, :y 42, :state :scrub, :altitude 69, :gradient 37, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 50} {:x 45, :y 42, :state :climax, :altitude 69, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 22} {:x 46, :y 42, :state :scrub, :altitude 89, :gradient 42, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 46} {:x 47, :y 42, :state :forest, :altitude 111, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 48, :y 42, :state :forest, :altitude 110, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 49, :y 42, :state :forest, :altitude 87, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 50, :y 42, :state :forest, :altitude 73, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 51, :y 42, :state :climax, :altitude 65, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 31} {:x 52, :y 42, :state :climax, :altitude 61, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 53, :y 42, :state :scrub, :altitude 60, :gradient 24, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 17} {:x 54, :y 42, :state :climax, :altitude 60, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 55, :y 42, :state :climax, :altitude 56, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 56, :y 42, :state :pasture, :altitude 43, :gradient 54, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 46} {:x 57, :y 42, :state :climax, :altitude 23, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 58, :y 42, :state :house, :altitude 12, :gradient 36, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 37} {:x 59, :y 42, :state :water, :altitude 1, :gradient 36, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 42, :state :water, :altitude 1, :gradient 22, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 42, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 42, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 43, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 43, :state :water, :altitude 1, :gradient 30, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 43, :state :climax, :altitude 14, :gradient 48, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 79} {:x 18, :y 43, :state :climax, :altitude 47, :gradient 48, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 19, :y 43, :state :climax, :altitude 36, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 20, :y 43, :state :scrub, :altitude 29, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 58} {:x 21, :y 43, :state :climax, :altitude 32, :gradient 7, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 22, :y 43, :state :heath, :altitude 32, :gradient 7, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 53} {:x 23, :y 43, :state :scrub, :altitude 35, :gradient 5, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 42} {:x 24, :y 43, :state :climax, :altitude 36, :gradient 9, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 6} {:x 25, :y 43, :state :scrub, :altitude 42, :gradient 18, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 63} {:x 26, :y 43, :state :scrub, :altitude 51, :gradient 19, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 60} {:x 27, :y 43, :state :scrub, :altitude 54, :gradient 14, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 52} {:x 28, :y 43, :state :scrub, :altitude 51, :gradient 30, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 43} {:x 29, :y 43, :state :scrub, :altitude 75, :gradient 41, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 58} {:x 30, :y 43, :state :waste, :altitude 91, :gradient 28, :generation 89, :rule "if state is fire then state should be waste", :fertility 42} {:x 31, :y 43, :state :scrub, :altitude 88, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 41} {:x 32, :y 43, :state :forest, :altitude 91, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 33, :y 43, :state :waste, :altitude 94, :gradient 27, :generation 89, :rule "if state is fire then state should be waste", :fertility 55} {:x 34, :y 43, :state :scrub, :altitude 92, :gradient 39, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 35} {:x 35, :y 43, :state :forest, :altitude 91, :gradient 46, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 36, :y 43, :state :forest, :altitude 115, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 26} {:x 37, :y 43, :state :forest, :altitude 110, :gradient 49, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 38, :y 43, :state :forest, :altitude 91, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 39, :y 43, :state :forest, :altitude 105, :gradient 48, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 40, :y 43, :state :forest, :altitude 88, :gradient 60, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 36} {:x 41, :y 43, :state :climax, :altitude 65, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 42, :y 43, :state :climax, :altitude 68, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 43, :y 43, :state :forest, :altitude 70, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 44, :y 43, :state :climax, :altitude 60, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 45, :y 43, :state :forest, :altitude 75, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 46, :y 43, :state :forest, :altitude 94, :gradient 42, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 45} {:x 47, :y 43, :state :scrub, :altitude 110, :gradient 22, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 39} {:x 48, :y 43, :state :scrub, :altitude 103, :gradient 24, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 35} {:x 49, :y 43, :state :forest, :altitude 91, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 32} {:x 50, :y 43, :state :forest, :altitude 87, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 51, :y 43, :state :forest, :altitude 82, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 52, :y 43, :state :forest, :altitude 74, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 29} {:x 53, :y 43, :state :climax, :altitude 63, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 25} {:x 54, :y 43, :state :climax, :altitude 56, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 55, :y 43, :state :climax, :altitude 54, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 56, :y 43, :state :pasture, :altitude 33, :gradient 55, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 36} {:x 57, :y 43, :state :water, :altitude 2, :gradient 42, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 43, :state :water, :altitude 1, :gradient 22, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 43, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 43, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 44, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 44, :state :water, :altitude 2, :gradient 30, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 44, :state :climax, :altitude 31, :gradient 48, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 18, :y 44, :state :climax, :altitude 49, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 19, :y 44, :state :climax, :altitude 33, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 32} {:x 20, :y 44, :state :climax, :altitude 29, :gradient 7, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 11} {:x 21, :y 44, :state :climax, :altitude 29, :gradient 3, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 40} {:x 22, :y 44, :state :scrub, :altitude 31, :gradient 6, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 59} {:x 23, :y 44, :state :climax, :altitude 33, :gradient 7, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 24, :y 44, :state :climax, :altitude 36, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 25, :y 44, :state :forest, :altitude 37, :gradient 20, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 51} {:x 26, :y 44, :state :climax, :altitude 42, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 27, :y 44, :state :scrub, :altitude 45, :gradient 18, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 28} {:x 28, :y 44, :state :forest, :altitude 50, :gradient 35, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 48} {:x 29, :y 44, :state :forest, :altitude 66, :gradient 46, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 33} {:x 30, :y 44, :state :scrub, :altitude 74, :gradient 37, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 28} {:x 31, :y 44, :state :heath, :altitude 75, :gradient 34, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 47} {:x 32, :y 44, :state :scrub, :altitude 74, :gradient 34, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 46} {:x 33, :y 44, :state :fire, :altitude 79, :gradient 51, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 40} {:x 34, :y 44, :state :forest, :altitude 101, :gradient 46, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 35, :y 44, :state :forest, :altitude 117, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 36, :y 44, :state :heath, :altitude 124, :gradient 33, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 37, :y 44, :state :forest, :altitude 100, :gradient 55, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 38, :y 44, :state :scrub, :altitude 75, :gradient 47, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 56} {:x 39, :y 44, :state :forest, :altitude 78, :gradient 45, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 40, :y 44, :state :forest, :altitude 71, :gradient 50, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 41, :y 44, :state :climax, :altitude 59, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 42, :y 44, :state :climax, :altitude 64, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 43, :y 44, :state :climax, :altitude 59, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 44, :y 44, :state :forest, :altitude 66, :gradient 30, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 45} {:x 45, :y 44, :state :scrub, :altitude 87, :gradient 34, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 56} {:x 46, :y 44, :state :forest, :altitude 94, :gradient 35, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 65} {:x 47, :y 44, :state :forest, :altitude 94, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 48, :y 44, :state :forest, :altitude 94, :gradient 35, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 49, :y 44, :state :scrub, :altitude 92, :gradient 32, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 40} {:x 50, :y 44, :state :forest, :altitude 83, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 51, :y 44, :state :scrub, :altitude 82, :gradient 16, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 7} {:x 52, :y 44, :state :forest, :altitude 75, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 53, :y 44, :state :climax, :altitude 57, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 54, :y 44, :state :scrub, :altitude 52, :gradient 22, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 25} {:x 55, :y 44, :state :pasture, :altitude 47, :gradient 33, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 41} {:x 56, :y 44, :state :pasture, :altitude 23, :gradient 53, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 38} {:x 57, :y 44, :state :water, :altitude 1, :gradient 32, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 44, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 44, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 45, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 45, :state :water, :altitude 1, :gradient 30, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 45, :state :climax, :altitude 27, :gradient 48, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 18, :y 45, :state :scrub, :altitude 43, :gradient 31, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 52} {:x 19, :y 45, :state :climax, :altitude 35, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 20, :y 45, :state :climax, :altitude 31, :gradient 11, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 35} {:x 21, :y 45, :state :climax, :altitude 29, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 22, :y 45, :state :climax, :altitude 29, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 32} {:x 23, :y 45, :state :climax, :altitude 31, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 24, :y 45, :state :scrub, :altitude 31, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 63} {:x 25, :y 45, :state :climax, :altitude 33, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 26, :y 45, :state :climax, :altitude 36, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 27, :y 45, :state :climax, :altitude 40, :gradient 14, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 43} {:x 28, :y 45, :state :climax, :altitude 45, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 29, :y 45, :state :climax, :altitude 54, :gradient 37, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 32} {:x 30, :y 45, :state :climax, :altitude 57, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 31, :y 45, :state :scrub, :altitude 61, :gradient 28, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 57} {:x 32, :y 45, :state :climax, :altitude 60, :gradient 43, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 33, :y 45, :state :forest, :altitude 78, :gradient 54, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 61} {:x 34, :y 45, :state :forest, :altitude 111, :gradient 46, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 35, :y 45, :state :heath, :altitude 124, :gradient 38, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 36, :y 45, :state :forest, :altitude 117, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 37, :y 45, :state :forest, :altitude 91, :gradient 55, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 38, :y 45, :state :climax, :altitude 69, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 20} {:x 39, :y 45, :state :climax, :altitude 63, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 30} {:x 40, :y 45, :state :climax, :altitude 60, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 73} {:x 41, :y 45, :state :climax, :altitude 55, :gradient 21, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 54} {:x 42, :y 45, :state :forest, :altitude 54, :gradient 14, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 52} {:x 43, :y 45, :state :climax, :altitude 57, :gradient 24, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 44, :y 45, :state :scrub, :altitude 74, :gradient 30, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 44} {:x 45, :y 45, :state :forest, :altitude 79, :gradient 33, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 56} {:x 46, :y 45, :state :forest, :altitude 77, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 47, :y 45, :state :forest, :altitude 77, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 48, :y 45, :state :scrub, :altitude 78, :gradient 29, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 27} {:x 49, :y 45, :state :forest, :altitude 75, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 24} {:x 50, :y 45, :state :forest, :altitude 71, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 51, :y 45, :state :forest, :altitude 73, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 52, :y 45, :state :forest, :altitude 74, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 53, :y 45, :state :fire, :altitude 64, :gradient 25, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 66} {:x 54, :y 45, :state :climax, :altitude 50, :gradient 22, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 30} {:x 55, :y 45, :state :pasture, :altitude 42, :gradient 29, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 36} {:x 56, :y 45, :state :grassland, :altitude 29, :gradient 46, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 31} {:x 57, :y 45, :state :water, :altitude 1, :gradient 44, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 45, :state :water, :altitude 1, :gradient 32, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 45, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 45, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 46, :state :water, :altitude 1, :gradient 28, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 46, :state :forest, :altitude 18, :gradient 49, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 56} {:x 18, :y 46, :state :scrub, :altitude 43, :gradient 32, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 19, :y 46, :state :heath, :altitude 40, :gradient 19, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 36} {:x 20, :y 46, :state :scrub, :altitude 35, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 63} {:x 21, :y 46, :state :climax, :altitude 35, :gradient 22, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 42} {:x 22, :y 46, :state :scrub, :altitude 38, :gradient 31, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 59} {:x 23, :y 46, :state :climax, :altitude 40, :gradient 36, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 51} {:x 24, :y 46, :state :scrub, :altitude 37, :gradient 39, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 61} {:x 25, :y 46, :state :climax, :altitude 40, :gradient 39, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 50} {:x 26, :y 46, :state :climax, :altitude 37, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 27, :y 46, :state :scrub, :altitude 36, :gradient 24, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 29} {:x 28, :y 46, :state :forest, :altitude 37, :gradient 19, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 38} {:x 29, :y 46, :state :scrub, :altitude 41, :gradient 22, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 42} {:x 30, :y 46, :state :climax, :altitude 47, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 31, :y 46, :state :scrub, :altitude 49, :gradient 24, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 71} {:x 32, :y 46, :state :forest, :altitude 61, :gradient 52, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 42} {:x 33, :y 46, :state :forest, :altitude 92, :gradient 63, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 34, :y 46, :state :forest, :altitude 114, :gradient 60, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 34} {:x 35, :y 46, :state :forest, :altitude 97, :gradient 63, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 29} {:x 36, :y 46, :state :fire, :altitude 86, :gradient 63, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 37} {:x 37, :y 46, :state :scrub, :altitude 80, :gradient 56, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 32} {:x 38, :y 46, :state :forest, :altitude 71, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 39, :y 46, :state :climax, :altitude 60, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 40, :y 46, :state :scrub, :altitude 52, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 32} {:x 41, :y 46, :state :scrub, :altitude 51, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 34} {:x 42, :y 46, :state :climax, :altitude 50, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 32} {:x 43, :y 46, :state :scrub, :altitude 61, :gradient 27, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 53} {:x 44, :y 46, :state :scrub, :altitude 69, :gradient 25, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 45, :y 46, :state :climax, :altitude 64, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 46, :y 46, :state :climax, :altitude 61, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 47, :y 46, :state :climax, :altitude 69, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 48, :y 46, :state :climax, :altitude 68, :gradient 21, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 52} {:x 49, :y 46, :state :climax, :altitude 65, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 50, :y 46, :state :climax, :altitude 64, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 25} {:x 51, :y 46, :state :climax, :altitude 66, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 52, :y 46, :state :climax, :altitude 65, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 53, :y 46, :state :fire, :altitude 59, :gradient 25, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 24} {:x 54, :y 46, :state :waste, :altitude 51, :gradient 22, :generation 89, :rule "if state is fire then state should be waste", :fertility 61} {:x 55, :y 46, :state :waste, :altitude 46, :gradient 22, :generation 89, :rule "if state is fire then state should be waste", :fertility 43} {:x 56, :y 46, :state :grassland, :altitude 45, :gradient 50, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 31} {:x 57, :y 46, :state :house, :altitude 33, :gradient 50, :generation 89, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 32} {:x 58, :y 46, :state :house, :altitude 13, :gradient 41, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 59, :y 46, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 46, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 47, :state :water, :altitude 1, :gradient 34, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 47, :state :pasture, :altitude 29, :gradient 50, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 33} {:x 18, :y 47, :state :pasture, :altitude 50, :gradient 33, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 53} {:x 19, :y 47, :state :scrub, :altitude 46, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 29} {:x 20, :y 47, :state :climax, :altitude 38, :gradient 26, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 44} {:x 21, :y 47, :state :scrub, :altitude 45, :gradient 26, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 53} {:x 22, :y 47, :state :scrub, :altitude 51, :gradient 40, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 50} {:x 23, :y 47, :state :scrub, :altitude 60, :gradient 52, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 52} {:x 24, :y 47, :state :scrub, :altitude 65, :gradient 52, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 64} {:x 25, :y 47, :state :scrub, :altitude 70, :gradient 52, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 50} {:x 26, :y 47, :state :scrub, :altitude 59, :gradient 43, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 52} {:x 27, :y 47, :state :scrub, :altitude 36, :gradient 24, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 34} {:x 28, :y 47, :state :scrub, :altitude 35, :gradient 11, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 47} {:x 29, :y 47, :state :scrub, :altitude 36, :gradient 12, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 51} {:x 30, :y 47, :state :scrub, :altitude 37, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 42} {:x 31, :y 47, :state :forest, :altitude 40, :gradient 24, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 50} {:x 32, :y 47, :state :forest, :altitude 51, :gradient 54, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 39} {:x 33, :y 47, :state :scrub, :altitude 71, :gradient 76, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 57} {:x 34, :y 47, :state :forest, :altitude 77, :gradient 72, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 35, :y 47, :state :scrub, :altitude 64, :gradient 69, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 47} {:x 36, :y 47, :state :climax, :altitude 61, :gradient 50, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 27} {:x 37, :y 47, :state :waste, :altitude 66, :gradient 35, :generation 89, :rule "if state is fire then state should be waste", :fertility 59} {:x 38, :y 47, :state :waste, :altitude 66, :gradient 23, :generation 89, :rule "if state is fire then state should be waste", :fertility 63} {:x 39, :y 47, :state :climax, :altitude 60, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 40, :y 47, :state :scrub, :altitude 52, :gradient 14, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 18} {:x 41, :y 47, :state :climax, :altitude 50, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 42, :y 47, :state :climax, :altitude 47, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 43, :y 47, :state :climax, :altitude 55, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 44, :y 47, :state :scrub, :altitude 56, :gradient 22, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 45} {:x 45, :y 47, :state :forest, :altitude 54, :gradient 22, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 46} {:x 46, :y 47, :state :climax, :altitude 59, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 47, :y 47, :state :scrub, :altitude 63, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 48, :y 47, :state :climax, :altitude 60, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 49, :y 47, :state :climax, :altitude 57, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 26} {:x 50, :y 47, :state :scrub, :altitude 59, :gradient 14, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 40} {:x 51, :y 47, :state :climax, :altitude 61, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 27} {:x 52, :y 47, :state :climax, :altitude 56, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 53, :y 47, :state :climax, :altitude 51, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 54, :y 47, :state :heath, :altitude 49, :gradient 13, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 48} {:x 55, :y 47, :state :waste, :altitude 51, :gradient 6, :generation 89, :rule "if state is fire then state should be waste", :fertility 34} {:x 56, :y 47, :state :forest, :altitude 51, :gradient 18, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 36} {:x 57, :y 47, :state :pasture, :altitude 42, :gradient 38, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 58, :y 47, :state :grassland, :altitude 14, :gradient 41, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 10} {:x 59, :y 47, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 47, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 48, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 48, :state :water, :altitude 1, :gradient 37, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 48, :state :ploughland, :altitude 35, :gradient 50, :generation 89, :rule "if state is waste and fertility is more than 10 and some neighbours are house or some neighbours are camp then state should be ploughland", :fertility 64} {:x 18, :y 48, :state :camp, :altitude 51, :gradient 21, :generation 89, :rule "if state is in grassland or heath and more than 2 neighbours are pasture then 1 chance in 3 state should be camp", :fertility 33} {:x 19, :y 48, :state :fire, :altitude 43, :gradient 26, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 45} {:x 20, :y 48, :state :climax, :altitude 52, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 21, :y 48, :state :scrub, :altitude 61, :gradient 33, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 22, :y 48, :state :scrub, :altitude 60, :gradient 41, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 21} {:x 23, :y 48, :state :forest, :altitude 75, :gradient 38, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 24, :y 48, :state :forest, :altitude 89, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 32} {:x 25, :y 48, :state :scrub, :altitude 79, :gradient 40, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 51} {:x 26, :y 48, :state :scrub, :altitude 54, :gradient 43, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 72} {:x 27, :y 48, :state :climax, :altitude 40, :gradient 24, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 28, :y 48, :state :forest, :altitude 43, :gradient 25, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 51} {:x 29, :y 48, :state :forest, :altitude 47, :gradient 25, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 31} {:x 30, :y 48, :state :climax, :altitude 45, :gradient 24, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 47} {:x 31, :y 48, :state :scrub, :altitude 40, :gradient 19, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 32, :y 48, :state :scrub, :altitude 38, :gradient 31, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 58} {:x 33, :y 48, :state :fire, :altitude 42, :gradient 40, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 36} {:x 34, :y 48, :state :heath, :altitude 45, :gradient 40, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 60} {:x 35, :y 48, :state :scrub, :altitude 47, :gradient 40, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 36, :y 48, :state :scrub, :altitude 51, :gradient 26, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 46} {:x 37, :y 48, :state :fire, :altitude 57, :gradient 23, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 39} {:x 38, :y 48, :state :heath, :altitude 64, :gradient 16, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 47} {:x 39, :y 48, :state :climax, :altitude 60, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 40, :y 48, :state :climax, :altitude 52, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 41, :y 48, :state :fire, :altitude 46, :gradient 11, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 43} {:x 42, :y 48, :state :heath, :altitude 43, :gradient 13, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 39} {:x 43, :y 48, :state :scrub, :altitude 49, :gradient 14, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 48} {:x 44, :y 48, :state :climax, :altitude 47, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 45, :y 48, :state :climax, :altitude 50, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 46, :y 48, :state :climax, :altitude 57, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 47, :y 48, :state :climax, :altitude 55, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 48, :y 48, :state :forest, :altitude 52, :gradient 13, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 37} {:x 49, :y 48, :state :climax, :altitude 52, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 50, :y 48, :state :climax, :altitude 57, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 51, :y 48, :state :climax, :altitude 56, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 52, :y 48, :state :climax, :altitude 50, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 29} {:x 53, :y 48, :state :climax, :altitude 47, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 23} {:x 54, :y 48, :state :climax, :altitude 46, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 55, :y 48, :state :pasture, :altitude 47, :gradient 13, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 31} {:x 56, :y 48, :state :grassland, :altitude 50, :gradient 34, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 15} {:x 57, :y 48, :state :house, :altitude 36, :gradient 50, :generation 89, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 25} {:x 58, :y 48, :state :house, :altitude 13, :gradient 41, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 59, :y 48, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 48, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 49, :state :water, :altitude 1, :gradient 23, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 49, :state :house, :altitude 14, :gradient 39, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 18} {:x 17, :y 49, :state :ploughland, :altitude 38, :gradient 50, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 29} {:x 18, :y 49, :state :waste, :altitude 43, :gradient 16, :generation 89, :rule "if state is fire then state should be waste", :fertility 55} {:x 19, :y 49, :state :climax, :altitude 46, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 20, :y 49, :state :scrub, :altitude 64, :gradient 32, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 52} {:x 21, :y 49, :state :forest, :altitude 71, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 22, :y 49, :state :forest, :altitude 71, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 23, :y 49, :state :scrub, :altitude 86, :gradient 29, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 24, :y 49, :state :scrub, :altitude 86, :gradient 26, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 19} {:x 25, :y 49, :state :climax, :altitude 68, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 26, :y 49, :state :climax, :altitude 49, :gradient 39, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 27, :y 49, :state :scrub, :altitude 49, :gradient 26, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 57} {:x 28, :y 49, :state :climax, :altitude 57, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 29, :y 49, :state :scrub, :altitude 60, :gradient 23, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 47} {:x 30, :y 49, :state :scrub, :altitude 55, :gradient 25, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 31, :y 49, :state :scrub, :altitude 56, :gradient 27, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 36} {:x 32, :y 49, :state :forest, :altitude 56, :gradient 27, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 52} {:x 33, :y 49, :state :scrub, :altitude 47, :gradient 27, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 48} {:x 34, :y 49, :state :waste, :altitude 37, :gradient 17, :generation 89, :rule "if state is fire then state should be waste", :fertility 37} {:x 35, :y 49, :state :climax, :altitude 40, :gradient 14, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 29} {:x 36, :y 49, :state :climax, :altitude 43, :gradient 20, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 37} {:x 37, :y 49, :state :scrub, :altitude 50, :gradient 27, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 53} {:x 38, :y 49, :state :waste, :altitude 55, :gradient 22, :generation 89, :rule "if state is fire then state should be waste", :fertility 63} {:x 39, :y 49, :state :climax, :altitude 55, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 40, :y 49, :state :climax, :altitude 54, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 41, :y 49, :state :climax, :altitude 51, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 42, :y 49, :state :waste, :altitude 47, :gradient 9, :generation 89, :rule "if state is fire then state should be waste", :fertility 45} {:x 43, :y 49, :state :fire, :altitude 42, :gradient 9, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 62} {:x 44, :y 49, :state :climax, :altitude 42, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 45, :y 49, :state :climax, :altitude 47, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 46, :y 49, :state :climax, :altitude 52, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 47, :y 49, :state :climax, :altitude 55, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 48, :y 49, :state :climax, :altitude 54, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 49, :y 49, :state :scrub, :altitude 50, :gradient 12, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 50, :y 49, :state :climax, :altitude 52, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 51, :y 49, :state :climax, :altitude 51, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 52, :y 49, :state :climax, :altitude 46, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 28} {:x 53, :y 49, :state :climax, :altitude 43, :gradient 10, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 37} {:x 54, :y 49, :state :scrub, :altitude 43, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 33} {:x 55, :y 49, :state :pasture, :altitude 49, :gradient 26, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 56} {:x 56, :y 49, :state :grassland, :altitude 38, :gradient 49, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 15} {:x 57, :y 49, :state :grassland, :altitude 17, :gradient 49, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 11} {:x 58, :y 49, :state :water, :altitude 1, :gradient 35, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 49, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 49, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 50, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 50, :state :water, :altitude 1, :gradient 22, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 50, :state :water, :altitude 1, :gradient 34, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 50, :state :pasture, :altitude 24, :gradient 49, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 37} {:x 17, :y 50, :state :fire, :altitude 40, :gradient 45, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 62} {:x 18, :y 50, :state :climax, :altitude 46, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 19, :y 50, :state :climax, :altitude 47, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 21} {:x 20, :y 50, :state :climax, :altitude 61, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 21, :y 50, :state :forest, :altitude 75, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 22, :y 50, :state :scrub, :altitude 83, :gradient 15, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 20} {:x 23, :y 50, :state :scrub, :altitude 83, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 24, :y 50, :state :scrub, :altitude 71, :gradient 25, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 56} {:x 25, :y 50, :state :climax, :altitude 63, :gradient 37, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 45} {:x 26, :y 50, :state :climax, :altitude 50, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 27, :y 50, :state :scrub, :altitude 56, :gradient 19, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 43} {:x 28, :y 50, :state :forest, :altitude 66, :gradient 19, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 57} {:x 29, :y 50, :state :climax, :altitude 65, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 30, :y 50, :state :scrub, :altitude 61, :gradient 16, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 31, :y 50, :state :scrub, :altitude 65, :gradient 16, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 48} {:x 32, :y 50, :state :scrub, :altitude 64, :gradient 24, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 45} {:x 33, :y 50, :state :heath, :altitude 54, :gradient 27, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 41} {:x 34, :y 50, :state :scrub, :altitude 42, :gradient 23, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 28} {:x 35, :y 50, :state :scrub, :altitude 37, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 34} {:x 36, :y 50, :state :climax, :altitude 37, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 37, :y 50, :state :scrub, :altitude 42, :gradient 19, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 55} {:x 38, :y 50, :state :fire, :altitude 46, :gradient 19, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 58} {:x 39, :y 50, :state :climax, :altitude 49, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 40, :y 50, :state :scrub, :altitude 49, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 43} {:x 41, :y 50, :state :scrub, :altitude 50, :gradient 12, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 66} {:x 42, :y 50, :state :fire, :altitude 49, :gradient 9, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 19} {:x 43, :y 50, :state :climax, :altitude 42, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 44, :y 50, :state :forest, :altitude 40, :gradient 10, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 43} {:x 45, :y 50, :state :climax, :altitude 43, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 46, :y 50, :state :climax, :altitude 49, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 47, :y 50, :state :climax, :altitude 56, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 48, :y 50, :state :climax, :altitude 57, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 49, :y 50, :state :scrub, :altitude 47, :gradient 16, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 24} {:x 50, :y 50, :state :climax, :altitude 45, :gradient 14, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 16} {:x 51, :y 50, :state :climax, :altitude 45, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 52, :y 50, :state :scrub, :altitude 41, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 35} {:x 53, :y 50, :state :scrub, :altitude 40, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 51} {:x 54, :y 50, :state :climax, :altitude 41, :gradient 30, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 32} {:x 55, :y 50, :state :climax, :altitude 42, :gradient 47, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 56, :y 50, :state :pasture, :altitude 24, :gradient 48, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 20} {:x 57, :y 50, :state :water, :altitude 1, :gradient 37, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 50, :state :water, :altitude 1, :gradient 16, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 50, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 51, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 51, :state :house, :altitude 13, :gradient 32, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 34} {:x 15, :y 51, :state :climax, :altitude 23, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 16, :y 51, :state :climax, :altitude 35, :gradient 59, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 17, :y 51, :state :climax, :altitude 50, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 18, :y 51, :state :climax, :altitude 59, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 27} {:x 19, :y 51, :state :climax, :altitude 54, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 20, :y 51, :state :climax, :altitude 57, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 21, :y 51, :state :forest, :altitude 78, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 22, :y 51, :state :waste, :altitude 86, :gradient 17, :generation 89, :rule "if state is fire then state should be waste", :fertility 54} {:x 23, :y 51, :state :waste, :altitude 78, :gradient 17, :generation 89, :rule "if state is fire then state should be waste", :fertility 62} {:x 24, :y 51, :state :scrub, :altitude 69, :gradient 22, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 43} {:x 25, :y 51, :state :scrub, :altitude 61, :gradient 25, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 41} {:x 26, :y 51, :state :scrub, :altitude 54, :gradient 21, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 28} {:x 27, :y 51, :state :scrub, :altitude 57, :gradient 18, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 45} {:x 28, :y 51, :state :climax, :altitude 68, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 29, :y 51, :state :forest, :altitude 66, :gradient 10, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 56} {:x 30, :y 51, :state :forest, :altitude 70, :gradient 12, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 29} {:x 31, :y 51, :state :fire, :altitude 71, :gradient 12, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 56} {:x 32, :y 51, :state :heath, :altitude 64, :gradient 19, :generation 89, :rule "if state is waste and some neighbours are forest then state should be heath", :fertility 41} {:x 33, :y 51, :state :heath, :altitude 60, :gradient 26, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 47} {:x 34, :y 51, :state :scrub, :altitude 54, :gradient 23, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 25} {:x 35, :y 51, :state :climax, :altitude 46, :gradient 17, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 49} {:x 36, :y 51, :state :forest, :altitude 37, :gradient 11, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 40} {:x 37, :y 51, :state :scrub, :altitude 36, :gradient 11, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 38, :y 51, :state :climax, :altitude 41, :gradient 14, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 44} {:x 39, :y 51, :state :scrub, :altitude 43, :gradient 14, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 46} {:x 40, :y 51, :state :scrub, :altitude 42, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 44} {:x 41, :y 51, :state :scrub, :altitude 42, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 63} {:x 42, :y 51, :state :forest, :altitude 43, :gradient 17, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 37} {:x 43, :y 51, :state :climax, :altitude 42, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 44, :y 51, :state :climax, :altitude 37, :gradient 7, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 53} {:x 45, :y 51, :state :climax, :altitude 42, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 46, :y 51, :state :climax, :altitude 51, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 47, :y 51, :state :forest, :altitude 52, :gradient 12, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 15} {:x 48, :y 51, :state :climax, :altitude 52, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 49, :y 51, :state :climax, :altitude 46, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 50, :y 51, :state :scrub, :altitude 41, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 59} {:x 51, :y 51, :state :pasture, :altitude 38, :gradient 9, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 48} {:x 52, :y 51, :state :climax, :altitude 42, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 53, :y 51, :state :pasture, :altitude 38, :gradient 32, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 54, :y 51, :state :pasture, :altitude 29, :gradient 41, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 39} {:x 55, :y 51, :state :pasture, :altitude 19, :gradient 41, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 60} {:x 56, :y 51, :state :water, :altitude 2, :gradient 41, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 51, :state :water, :altitude 1, :gradient 23, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 51, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 52, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 52, :state :pasture, :altitude 18, :gradient 36, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 15, :y 52, :state :climax, :altitude 33, :gradient 38, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 16, :y 52, :state :pasture, :altitude 43, :gradient 47, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 24} {:x 17, :y 52, :state :climax, :altitude 60, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 18, :y 52, :state :climax, :altitude 68, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 19, :y 52, :state :forest, :altitude 70, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 20, :y 52, :state :forest, :altitude 73, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 21, :y 52, :state :climax, :altitude 66, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 22, :y 52, :state :heath, :altitude 73, :gradient 23, :generation 89, :rule "if state is waste and some neighbours are forest then state should be heath", :fertility 30} {:x 23, :y 52, :state :scrub, :altitude 78, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 60} {:x 24, :y 52, :state :waste, :altitude 75, :gradient 25, :generation 89, :rule "if state is fire then state should be waste", :fertility 43} {:x 25, :y 52, :state :scrub, :altitude 71, :gradient 32, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 44} {:x 26, :y 52, :state :climax, :altitude 65, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 27, :y 52, :state :heath, :altitude 55, :gradient 26, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 59} {:x 28, :y 52, :state :climax, :altitude 60, :gradient 13, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 63} {:x 29, :y 52, :state :scrub, :altitude 61, :gradient 11, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 52} {:x 30, :y 52, :state :scrub, :altitude 65, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 32} {:x 31, :y 52, :state :waste, :altitude 73, :gradient 11, :generation 89, :rule "if state is fire then state should be waste", :fertility 36} {:x 32, :y 52, :state :heath, :altitude 68, :gradient 17, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 54} {:x 33, :y 52, :state :scrub, :altitude 56, :gradient 21, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 49} {:x 34, :y 52, :state :scrub, :altitude 51, :gradient 18, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 45} {:x 35, :y 52, :state :climax, :altitude 43, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 36, :y 52, :state :scrub, :altitude 37, :gradient 11, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 39} {:x 37, :y 52, :state :scrub, :altitude 35, :gradient 7, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 50} {:x 38, :y 52, :state :climax, :altitude 37, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 39, :y 52, :state :scrub, :altitude 38, :gradient 8, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 64} {:x 40, :y 52, :state :scrub, :altitude 35, :gradient 10, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 17} {:x 41, :y 52, :state :fire, :altitude 33, :gradient 8, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 64} {:x 42, :y 52, :state :climax, :altitude 37, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 43, :y 52, :state :scrub, :altitude 41, :gradient 8, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 53} {:x 44, :y 52, :state :climax, :altitude 36, :gradient 7, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 45, :y 52, :state :climax, :altitude 40, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 46, :y 52, :state :climax, :altitude 47, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 47, :y 52, :state :climax, :altitude 49, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 48, :y 52, :state :pasture, :altitude 45, :gradient 20, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 41} {:x 49, :y 52, :state :climax, :altitude 40, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 50, :y 52, :state :climax, :altitude 38, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 51, :y 52, :state :pasture, :altitude 41, :gradient 23, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 26} {:x 52, :y 52, :state :ploughland, :altitude 47, :gradient 25, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 12} {:x 53, :y 52, :state :camp, :altitude 36, :gradient 46, :generation 89, :rule "if state is in grassland or heath and more than 2 neighbours are pasture then 1 chance in 3 state should be camp", :fertility 43} {:x 54, :y 52, :state :climax, :altitude 15, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 55, :y 52, :state :water, :altitude 1, :gradient 28, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 52, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 52, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 52, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 53, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 53, :state :climax, :altitude 18, :gradient 36, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 70} {:x 15, :y 53, :state :climax, :altitude 37, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 16, :y 53, :state :climax, :altitude 51, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 17, :y 53, :state :forest, :altitude 70, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 18, :y 53, :state :forest, :altitude 75, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 19, :y 53, :state :scrub, :altitude 83, :gradient 18, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 25} {:x 20, :y 53, :state :forest, :altitude 83, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 21, :y 53, :state :fire, :altitude 63, :gradient 17, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 47} {:x 22, :y 53, :state :waste, :altitude 70, :gradient 28, :generation 89, :rule "if state is fire then state should be waste", :fertility 61} {:x 23, :y 53, :state :heath, :altitude 82, :gradient 30, :generation 89, :rule "if state is waste and some neighbours are forest then state should be heath", :fertility 57} {:x 24, :y 53, :state :waste, :altitude 86, :gradient 30, :generation 89, :rule "if state is fire then state should be waste", :fertility 47} {:x 25, :y 53, :state :scrub, :altitude 86, :gradient 36, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 53} {:x 26, :y 53, :state :forest, :altitude 80, :gradient 46, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 59} {:x 27, :y 53, :state :scrub, :altitude 61, :gradient 34, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 48} {:x 28, :y 53, :state :forest, :altitude 59, :gradient 15, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 53} {:x 29, :y 53, :state :climax, :altitude 63, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 30, :y 53, :state :climax, :altitude 60, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 31, :y 53, :state :waste, :altitude 64, :gradient 16, :generation 89, :rule "if state is fire then state should be waste", :fertility 16} {:x 32, :y 53, :state :scrub, :altitude 65, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 33} {:x 33, :y 53, :state :waste, :altitude 57, :gradient 21, :generation 89, :rule "if state is fire then state should be waste", :fertility 53} {:x 34, :y 53, :state :climax, :altitude 47, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 7} {:x 35, :y 53, :state :scrub, :altitude 42, :gradient 18, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 52} {:x 36, :y 53, :state :scrub, :altitude 42, :gradient 15, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 45} {:x 37, :y 53, :state :forest, :altitude 40, :gradient 15, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 55} {:x 38, :y 53, :state :scrub, :altitude 35, :gradient 15, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 40} {:x 39, :y 53, :state :scrub, :altitude 36, :gradient 15, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 40, :y 53, :state :waste, :altitude 36, :gradient 17, :generation 89, :rule "if state is fire then state should be waste", :fertility 33} {:x 41, :y 53, :state :waste, :altitude 38, :gradient 17, :generation 89, :rule "if state is fire then state should be waste", :fertility 47} {:x 42, :y 53, :state :scrub, :altitude 35, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 29} {:x 43, :y 53, :state :climax, :altitude 36, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 44, :y 53, :state :scrub, :altitude 35, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 45, :y 53, :state :climax, :altitude 37, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 23} {:x 46, :y 53, :state :climax, :altitude 43, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 47, :y 53, :state :climax, :altitude 42, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 48, :y 53, :state :pasture, :altitude 33, :gradient 34, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 47} {:x 49, :y 53, :state :grassland, :altitude 32, :gradient 30, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 27} {:x 50, :y 53, :state :climax, :altitude 31, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 51, :y 53, :state :house, :altitude 26, :gradient 46, :generation 89, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 16} {:x 52, :y 53, :state :ploughland, :altitude 24, :gradient 46, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 37} {:x 53, :y 53, :state :house, :altitude 17, :gradient 46, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 54, :y 53, :state :water, :altitude 1, :gradient 35, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 53, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 53, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 54, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 54, :state :house, :altitude 17, :gradient 36, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 15, :y 54, :state :climax, :altitude 35, :gradient 50, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 16, :y 54, :state :climax, :altitude 50, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 32} {:x 17, :y 54, :state :climax, :altitude 64, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 18, :y 54, :state :forest, :altitude 77, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 19, :y 54, :state :forest, :altitude 86, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 20, :y 54, :state :forest, :altitude 75, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 21, :y 54, :state :climax, :altitude 66, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 22, :y 54, :state :forest, :altitude 77, :gradient 43, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 23, :y 54, :state :forest, :altitude 91, :gradient 45, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 24, :y 54, :state :heath, :altitude 100, :gradient 33, :generation 89, :rule "if state is waste and some neighbours are forest then state should be heath", :fertility 45} {:x 25, :y 54, :state :waste, :altitude 101, :gradient 35, :generation 89, :rule "if state is fire then state should be waste", :fertility 42} {:x 26, :y 54, :state :scrub, :altitude 89, :gradient 45, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 61} {:x 27, :y 54, :state :heath, :altitude 70, :gradient 30, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 51} {:x 28, :y 54, :state :climax, :altitude 69, :gradient 18, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 40} {:x 29, :y 54, :state :climax, :altitude 66, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 30, :y 54, :state :climax, :altitude 57, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 31, :y 54, :state :climax, :altitude 57, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 30} {:x 32, :y 54, :state :climax, :altitude 61, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 23} {:x 33, :y 54, :state :climax, :altitude 61, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 34, :y 54, :state :fire, :altitude 55, :gradient 22, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 26} {:x 35, :y 54, :state :climax, :altitude 49, :gradient 22, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 36, :y 54, :state :heath, :altitude 50, :gradient 20, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 47} {:x 37, :y 54, :state :heath, :altitude 50, :gradient 25, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 47} {:x 38, :y 54, :state :scrub, :altitude 46, :gradient 24, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 76} {:x 39, :y 54, :state :climax, :altitude 50, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 40, :y 54, :state :heath, :altitude 50, :gradient 19, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 33} {:x 41, :y 54, :state :climax, :altitude 49, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 42, :y 54, :state :climax, :altitude 41, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 43, :y 54, :state :scrub, :altitude 32, :gradient 10, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 44, :y 54, :state :climax, :altitude 32, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 45, :y 54, :state :climax, :altitude 35, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 46, :y 54, :state :climax, :altitude 37, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 47, :y 54, :state :climax, :altitude 32, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 48, :y 54, :state :climax, :altitude 18, :gradient 41, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 49, :y 54, :state :climax, :altitude 15, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 50, :y 54, :state :house, :altitude 15, :gradient 31, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 26} {:x 51, :y 54, :state :water, :altitude 1, :gradient 30, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 54, :state :water, :altitude 1, :gradient 25, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 54, :state :water, :altitude 1, :gradient 23, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 54, :state :water, :altitude 1, :gradient 16, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 54, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 55, :state :water, :altitude 1, :gradient 16, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 55, :state :water, :altitude 1, :gradient 34, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 55, :state :pasture, :altitude 28, :gradient 62, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 27} {:x 16, :y 55, :state :climax, :altitude 51, :gradient 52, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 17, :y 55, :state :climax, :altitude 60, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 18, :y 55, :state :forest, :altitude 75, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 19, :y 55, :state :forest, :altitude 77, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 20, :y 55, :state :forest, :altitude 71, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 21, :y 55, :state :forest, :altitude 78, :gradient 39, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 22, :y 55, :state :forest, :altitude 89, :gradient 58, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 23, :y 55, :state :forest, :altitude 106, :gradient 48, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 24, :y 55, :state :heath, :altitude 115, :gradient 34, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 30} {:x 25, :y 55, :state :scrub, :altitude 106, :gradient 38, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 31} {:x 26, :y 55, :state :scrub, :altitude 87, :gradient 40, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 44} {:x 27, :y 55, :state :heath, :altitude 74, :gradient 20, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 54} {:x 28, :y 55, :state :forest, :altitude 77, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 29, :y 55, :state :climax, :altitude 68, :gradient 22, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 30, :y 55, :state :climax, :altitude 56, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 24} {:x 31, :y 55, :state :scrub, :altitude 52, :gradient 11, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 44} {:x 32, :y 55, :state :climax, :altitude 56, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 33, :y 55, :state :scrub, :altitude 59, :gradient 14, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 46} {:x 34, :y 55, :state :climax, :altitude 64, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 35, :y 55, :state :climax, :altitude 56, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 36, :y 55, :state :waste, :altitude 60, :gradient 19, :generation 89, :rule "if state is fire then state should be waste", :fertility 21} {:x 37, :y 55, :state :fire, :altitude 59, :gradient 22, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 49} {:x 38, :y 55, :state :climax, :altitude 55, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 39, :y 55, :state :climax, :altitude 55, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 40, :y 55, :state :waste, :altitude 51, :gradient 12, :generation 89, :rule "if state is fire then state should be waste", :fertility 48} {:x 41, :y 55, :state :waste, :altitude 45, :gradient 16, :generation 89, :rule "if state is fire then state should be waste", :fertility 36} {:x 42, :y 55, :state :climax, :altitude 38, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 43, :y 55, :state :climax, :altitude 31, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 44, :y 55, :state :climax, :altitude 33, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 45, :y 55, :state :climax, :altitude 37, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 46, :y 55, :state :climax, :altitude 33, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 25} {:x 47, :y 55, :state :pasture, :altitude 22, :gradient 36, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 29} {:x 48, :y 55, :state :water, :altitude 1, :gradient 31, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 55, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 55, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 55, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 55, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 56, :state :water, :altitude 1, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 56, :state :climax, :altitude 26, :gradient 62, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 16, :y 56, :state :climax, :altitude 63, :gradient 57, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 18} {:x 17, :y 56, :state :forest, :altitude 78, :gradient 35, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 18, :y 56, :state :forest, :altitude 80, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 19, :y 56, :state :scrub, :altitude 75, :gradient 18, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 27} {:x 20, :y 56, :state :forest, :altitude 79, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 21, :y 56, :state :forest, :altitude 91, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 22, :y 56, :state :forest, :altitude 105, :gradient 46, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 23, :y 56, :state :heath, :altitude 124, :gradient 36, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 24, :y 56, :state :heath, :altitude 125, :gradient 27, :generation 89, :rule "if state is grassland then 1 chance in 10 state should be heath"} {:x 25, :y 56, :state :scrub, :altitude 110, :gradient 41, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 43} {:x 26, :y 56, :state :scrub, :altitude 89, :gradient 36, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 26} {:x 27, :y 56, :state :heath, :altitude 77, :gradient 19, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 37} {:x 28, :y 56, :state :scrub, :altitude 75, :gradient 12, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 18} {:x 29, :y 56, :state :climax, :altitude 66, :gradient 22, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 30, :y 56, :state :scrub, :altitude 55, :gradient 18, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 15} {:x 31, :y 56, :state :climax, :altitude 50, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 29} {:x 32, :y 56, :state :climax, :altitude 50, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 32} {:x 33, :y 56, :state :climax, :altitude 52, :gradient 17, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 45} {:x 34, :y 56, :state :scrub, :altitude 56, :gradient 22, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 27} {:x 35, :y 56, :state :fire, :altitude 66, :gradient 15, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 64} {:x 36, :y 56, :state :climax, :altitude 68, :gradient 15, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 41} {:x 37, :y 56, :state :fire, :altitude 56, :gradient 19, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 55} {:x 38, :y 56, :state :climax, :altitude 50, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 39, :y 56, :state :forest, :altitude 46, :gradient 12, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 42} {:x 40, :y 56, :state :climax, :altitude 47, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 41, :y 56, :state :climax, :altitude 43, :gradient 16, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 28} {:x 42, :y 56, :state :fire, :altitude 35, :gradient 16, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 32} {:x 43, :y 56, :state :scrub, :altitude 29, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 44, :y 56, :state :climax, :altitude 31, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 45, :y 56, :state :climax, :altitude 33, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 46, :y 56, :state :climax, :altitude 32, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 47, :y 56, :state :crop, :altitude 18, :gradient 32, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 25} {:x 48, :y 56, :state :climax, :altitude 13, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 49, :y 56, :state :water, :altitude 2, :gradient 28, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 56, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 56, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 57, :state :water, :altitude 1, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 57, :state :climax, :altitude 28, :gradient 62, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 16, :y 57, :state :climax, :altitude 60, :gradient 73, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 17, :y 57, :state :forest, :altitude 83, :gradient 36, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 18} {:x 18, :y 57, :state :forest, :altitude 86, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 19, :y 57, :state :forest, :altitude 82, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 20, :y 57, :state :forest, :altitude 89, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 71} {:x 21, :y 57, :state :forest, :altitude 96, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 22, :y 57, :state :forest, :altitude 105, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 23, :y 57, :state :forest, :altitude 114, :gradient 41, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 24, :y 57, :state :fire, :altitude 110, :gradient 48, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 30} {:x 25, :y 57, :state :fire, :altitude 97, :gradient 54, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 43} {:x 26, :y 57, :state :forest, :altitude 84, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 27, :y 57, :state :waste, :altitude 74, :gradient 28, :generation 89, :rule "if state is fire then state should be waste", :fertility 49} {:x 28, :y 57, :state :scrub, :altitude 70, :gradient 18, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 33} {:x 29, :y 57, :state :waste, :altitude 65, :gradient 20, :generation 89, :rule "if state is fire then state should be waste", :fertility 53} {:x 30, :y 57, :state :climax, :altitude 57, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 31, :y 57, :state :climax, :altitude 51, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 28} {:x 32, :y 57, :state :climax, :altitude 47, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 29} {:x 33, :y 57, :state :forest, :altitude 49, :gradient 13, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 29} {:x 34, :y 57, :state :climax, :altitude 57, :gradient 22, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 35, :y 57, :state :forest, :altitude 71, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 36, :y 57, :state :climax, :altitude 66, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 18} {:x 37, :y 57, :state :climax, :altitude 56, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 38, :y 57, :state :climax, :altitude 49, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 39, :y 57, :state :climax, :altitude 43, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 40, :y 57, :state :climax, :altitude 43, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 41, :y 57, :state :climax, :altitude 43, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 42, :y 57, :state :climax, :altitude 36, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 43, :y 57, :state :climax, :altitude 29, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 44, :y 57, :state :climax, :altitude 31, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 45, :y 57, :state :climax, :altitude 32, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 46, :y 57, :state :house, :altitude 31, :gradient 31, :generation 89, :rule "if state is house and some neighbours are ploughland then state should be house", :fertility 49} {:x 47, :y 57, :state :crop, :altitude 29, :gradient 30, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 36} {:x 48, :y 57, :state :pasture, :altitude 29, :gradient 36, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 49, :y 57, :state :house, :altitude 13, :gradient 28, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 42} {:x 50, :y 57, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 57, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 58, :state :water, :altitude 1, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 58, :state :climax, :altitude 20, :gradient 81, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 16, :y 58, :state :climax, :altitude 63, :gradient 96, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 17, :y 58, :state :forest, :altitude 93, :gradient 56, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 18, :y 58, :state :forest, :altitude 96, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 19, :y 58, :state :forest, :altitude 93, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 20, :y 58, :state :forest, :altitude 98, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 26} {:x 21, :y 58, :state :forest, :altitude 93, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 22, :y 58, :state :forest, :altitude 84, :gradient 43, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 23, :y 58, :state :forest, :altitude 88, :gradient 43, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 24, :y 58, :state :waste, :altitude 87, :gradient 50, :generation 89, :rule "if state is fire then state should be waste", :fertility 41} {:x 25, :y 58, :state :waste, :altitude 77, :gradient 47, :generation 89, :rule "if state is fire then state should be waste", :fertility 55} {:x 26, :y 58, :state :waste, :altitude 71, :gradient 34, :generation 89, :rule "if state is fire then state should be waste", :fertility 55} {:x 27, :y 58, :state :climax, :altitude 68, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 28, :y 58, :state :heath, :altitude 61, :gradient 20, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 31} {:x 29, :y 58, :state :climax, :altitude 59, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 25} {:x 30, :y 58, :state :fire, :altitude 56, :gradient 14, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 47} {:x 31, :y 58, :state :climax, :altitude 51, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 23} {:x 32, :y 58, :state :scrub, :altitude 46, :gradient 5, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 32} {:x 33, :y 58, :state :climax, :altitude 49, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 34, :y 58, :state :climax, :altitude 59, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 22} {:x 35, :y 58, :state :climax, :altitude 66, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 30} {:x 36, :y 58, :state :climax, :altitude 61, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 23} {:x 37, :y 58, :state :climax, :altitude 60, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 38, :y 58, :state :climax, :altitude 57, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 43} {:x 39, :y 58, :state :climax, :altitude 46, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 18} {:x 40, :y 58, :state :climax, :altitude 41, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 41, :y 58, :state :scrub, :altitude 42, :gradient 11, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 29} {:x 42, :y 58, :state :climax, :altitude 35, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 43, :y 58, :state :scrub, :altitude 36, :gradient 23, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 58} {:x 44, :y 58, :state :climax, :altitude 45, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 45, :y 58, :state :climax, :altitude 49, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 46, :y 58, :state :climax, :altitude 43, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 47, :y 58, :state :grassland, :altitude 38, :gradient 29, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 37} {:x 48, :y 58, :state :climax, :altitude 27, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 49, :y 58, :state :water, :altitude 2, :gradient 28, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 58, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 58, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 59, :state :water, :altitude 1, :gradient 40, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 59, :state :climax, :altitude 22, :gradient 93, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 77} {:x 16, :y 59, :state :forest, :altitude 82, :gradient 96, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 17, :y 59, :state :forest, :altitude 116, :gradient 47, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 18, :y 59, :state :forest, :altitude 110, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 19, :y 59, :state :forest, :altitude 105, :gradient 24, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 20, :y 59, :state :scrub, :altitude 97, :gradient 35, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 36} {:x 21, :y 59, :state :forest, :altitude 84, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 22, :y 59, :state :forest, :altitude 71, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 23, :y 59, :state :fire, :altitude 73, :gradient 25, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 43} {:x 24, :y 59, :state :waste, :altitude 74, :gradient 31, :generation 89, :rule "if state is fire then state should be waste", :fertility 48} {:x 25, :y 59, :state :heath, :altitude 64, :gradient 31, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 24} {:x 26, :y 59, :state :heath, :altitude 63, :gradient 21, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 35} {:x 27, :y 59, :state :scrub, :altitude 64, :gradient 16, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 33} {:x 28, :y 59, :state :climax, :altitude 57, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 29, :y 59, :state :climax, :altitude 54, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 30, :y 59, :state :climax, :altitude 54, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 31, :y 59, :state :climax, :altitude 51, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 26} {:x 32, :y 59, :state :climax, :altitude 46, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 33, :y 59, :state :climax, :altitude 46, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 26} {:x 34, :y 59, :state :climax, :altitude 54, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 35, :y 59, :state :climax, :altitude 59, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 30} {:x 36, :y 59, :state :climax, :altitude 57, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 27} {:x 37, :y 59, :state :climax, :altitude 57, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 38, :y 59, :state :climax, :altitude 56, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 25} {:x 39, :y 59, :state :scrub, :altitude 54, :gradient 16, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 25} {:x 40, :y 59, :state :forest, :altitude 46, :gradient 16, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 41} {:x 41, :y 59, :state :scrub, :altitude 38, :gradient 11, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 41} {:x 42, :y 59, :state :climax, :altitude 37, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 43, :y 59, :state :scrub, :altitude 43, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 49} {:x 44, :y 59, :state :climax, :altitude 52, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 45, :y 59, :state :climax, :altitude 49, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 46, :y 59, :state :climax, :altitude 35, :gradient 47, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 47, :y 59, :state :grassland, :altitude 24, :gradient 42, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 53} {:x 48, :y 59, :state :house, :altitude 14, :gradient 37, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 50} {:x 49, :y 59, :state :water, :altitude 1, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 59, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 59, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 60, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 60, :state :water, :altitude 1, :gradient 56, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 60, :state :climax, :altitude 41, :gradient 93, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 16, :y 60, :state :forest, :altitude 94, :gradient 94, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 17, :y 60, :state :forest, :altitude 110, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 18, :y 60, :state :forest, :altitude 97, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 19, :y 60, :state :forest, :altitude 100, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 72} {:x 20, :y 60, :state :forest, :altitude 86, :gradient 39, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 26} {:x 21, :y 60, :state :forest, :altitude 70, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 22, :y 60, :state :climax, :altitude 64, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 23, :y 60, :state :climax, :altitude 63, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 45} {:x 24, :y 60, :state :climax, :altitude 63, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 25, :y 60, :state :fire, :altitude 57, :gradient 23, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 50} {:x 26, :y 60, :state :scrub, :altitude 56, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 26} {:x 27, :y 60, :state :scrub, :altitude 59, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 36} {:x 28, :y 60, :state :climax, :altitude 55, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 27} {:x 29, :y 60, :state :scrub, :altitude 51, :gradient 8, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 39} {:x 30, :y 60, :state :climax, :altitude 52, :gradient 5, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 28} {:x 31, :y 60, :state :scrub, :altitude 54, :gradient 8, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 30} {:x 32, :y 60, :state :scrub, :altitude 47, :gradient 11, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 35} {:x 33, :y 60, :state :climax, :altitude 45, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 34, :y 60, :state :climax, :altitude 51, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 35, :y 60, :state :climax, :altitude 54, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 29} {:x 36, :y 60, :state :climax, :altitude 55, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 27} {:x 37, :y 60, :state :climax, :altitude 51, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 38, :y 60, :state :climax, :altitude 50, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 39, :y 60, :state :climax, :altitude 50, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 40, :y 60, :state :climax, :altitude 46, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 41, :y 60, :state :climax, :altitude 41, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 42, :y 60, :state :pasture, :altitude 42, :gradient 14, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 34} {:x 43, :y 60, :state :pasture, :altitude 46, :gradient 21, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 40} {:x 44, :y 60, :state :pasture, :altitude 46, :gradient 38, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 49} {:x 45, :y 60, :state :pasture, :altitude 32, :gradient 51, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 50} {:x 46, :y 60, :state :climax, :altitude 18, :gradient 48, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 47, :y 60, :state :water, :altitude 2, :gradient 34, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 60, :state :water, :altitude 1, :gradient 23, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 60, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 60, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 61, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 61, :state :water, :altitude 1, :gradient 37, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 61, :state :house, :altitude 13, :gradient 72, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 34} {:x 15, :y 61, :state :ploughland, :altitude 57, :gradient 93, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 32} {:x 16, :y 61, :state :forest, :altitude 83, :gradient 69, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 17, :y 61, :state :forest, :altitude 82, :gradient 50, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 18, :y 61, :state :forest, :altitude 79, :gradient 50, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 19, :y 61, :state :forest, :altitude 91, :gradient 35, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 20, :y 61, :state :forest, :altitude 82, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 21, :y 61, :state :climax, :altitude 66, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 32} {:x 22, :y 61, :state :scrub, :altitude 57, :gradient 20, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 35} {:x 23, :y 61, :state :climax, :altitude 55, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 24, :y 61, :state :climax, :altitude 55, :gradient 17, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 51} {:x 25, :y 61, :state :climax, :altitude 51, :gradient 17, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 46} {:x 26, :y 61, :state :climax, :altitude 51, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 27, :y 61, :state :scrub, :altitude 54, :gradient 12, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 41} {:x 28, :y 61, :state :forest, :altitude 51, :gradient 13, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 39} {:x 29, :y 61, :state :scrub, :altitude 49, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 30, :y 61, :state :climax, :altitude 49, :gradient 8, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 30} {:x 31, :y 61, :state :climax, :altitude 52, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 32, :y 61, :state :scrub, :altitude 47, :gradient 12, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 55} {:x 33, :y 61, :state :climax, :altitude 43, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 34, :y 61, :state :climax, :altitude 50, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 35, :y 61, :state :climax, :altitude 51, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 36, :y 61, :state :climax, :altitude 54, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 17} {:x 37, :y 61, :state :climax, :altitude 46, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 38, :y 61, :state :scrub, :altitude 43, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 50} {:x 39, :y 61, :state :climax, :altitude 42, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 40, :y 61, :state :climax, :altitude 38, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 21} {:x 41, :y 61, :state :climax, :altitude 36, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 42, :y 61, :state :climax, :altitude 32, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 43, :y 61, :state :house, :altitude 33, :gradient 31, :generation 89, :rule "if state is in camp or abandoned and some neighbours are crop then state should be house", :fertility 19} {:x 44, :y 61, :state :climax, :altitude 31, :gradient 45, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 45, :y 61, :state :grassland, :altitude 14, :gradient 45, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 30} {:x 46, :y 61, :state :water, :altitude 1, :gradient 31, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 61, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 61, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 61, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 62, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 62, :state :water, :altitude 2, :gradient 68, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 62, :state :climax, :altitude 38, :gradient 83, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 76} {:x 15, :y 62, :state :house, :altitude 73, :gradient 71, :generation 89, :rule "if state is abandoned and some neighbours are pasture then state should be house", :fertility 42} {:x 16, :y 62, :state :climax, :altitude 69, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 17, :y 62, :state :climax, :altitude 60, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 18, :y 62, :state :climax, :altitude 65, :gradient 36, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 21} {:x 19, :y 62, :state :forest, :altitude 80, :gradient 36, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 20, :y 62, :state :fire, :altitude 79, :gradient 32, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 62} {:x 21, :y 62, :state :fire, :altitude 66, :gradient 28, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 45} {:x 22, :y 62, :state :climax, :altitude 56, :gradient 17, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 37} {:x 23, :y 62, :state :climax, :altitude 50, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 24, :y 62, :state :climax, :altitude 49, :gradient 10, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 42} {:x 25, :y 62, :state :forest, :altitude 46, :gradient 10, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 32} {:x 26, :y 62, :state :climax, :altitude 47, :gradient 9, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 54} {:x 27, :y 62, :state :climax, :altitude 49, :gradient 11, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 56} {:x 28, :y 62, :state :scrub, :altitude 47, :gradient 12, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 53} {:x 29, :y 62, :state :climax, :altitude 46, :gradient 9, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 37} {:x 30, :y 62, :state :scrub, :altitude 46, :gradient 10, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 25} {:x 31, :y 62, :state :scrub, :altitude 49, :gradient 11, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 32, :y 62, :state :scrub, :altitude 46, :gradient 11, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 33, :y 62, :state :climax, :altitude 42, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 26} {:x 34, :y 62, :state :fire, :altitude 46, :gradient 10, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 37} {:x 35, :y 62, :state :scrub, :altitude 50, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 19} {:x 36, :y 62, :state :scrub, :altitude 50, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 46} {:x 37, :y 62, :state :climax, :altitude 46, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 38, :y 62, :state :pasture, :altitude 43, :gradient 12, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 36} {:x 39, :y 62, :state :pasture, :altitude 38, :gradient 18, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 33} {:x 40, :y 62, :state :pasture, :altitude 32, :gradient 46, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 43} {:x 41, :y 62, :state :climax, :altitude 19, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 42, :y 62, :state :pasture, :altitude 17, :gradient 35, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 55} {:x 43, :y 62, :state :pasture, :altitude 19, :gradient 32, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 20} {:x 44, :y 62, :state :house, :altitude 15, :gradient 32, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 29} {:x 45, :y 62, :state :water, :altitude 1, :gradient 30, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 62, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 62, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 63, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 63, :state :water, :altitude 1, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 63, :state :climax, :altitude 18, :gradient 73, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 73} {:x 14, :y 63, :state :pasture, :altitude 69, :gradient 82, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 44} {:x 15, :y 63, :state :pasture, :altitude 84, :gradient 42, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 45} {:x 16, :y 63, :state :pasture, :altitude 68, :gradient 29, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 31} {:x 17, :y 63, :state :climax, :altitude 56, :gradient 20, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 33} {:x 18, :y 63, :state :climax, :altitude 55, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 24} {:x 19, :y 63, :state :climax, :altitude 61, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 42} {:x 20, :y 63, :state :fire, :altitude 63, :gradient 30, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 49} {:x 21, :y 63, :state :waste, :altitude 59, :gradient 28, :generation 89, :rule "if state is fire then state should be waste", :fertility 22} {:x 22, :y 63, :state :heath, :altitude 54, :gradient 17, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 51} {:x 23, :y 63, :state :climax, :altitude 49, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 24, :y 63, :state :climax, :altitude 47, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 25, :y 63, :state :climax, :altitude 45, :gradient 8, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 51} {:x 26, :y 63, :state :climax, :altitude 45, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 27, :y 63, :state :climax, :altitude 46, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 28, :y 63, :state :climax, :altitude 43, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 29, :y 63, :state :climax, :altitude 42, :gradient 6, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 44} {:x 30, :y 63, :state :scrub, :altitude 46, :gradient 8, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 41} {:x 31, :y 63, :state :climax, :altitude 45, :gradient 9, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 35} {:x 32, :y 63, :state :scrub, :altitude 41, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 31} {:x 33, :y 63, :state :waste, :altitude 42, :gradient 9, :generation 89, :rule "if state is fire then state should be waste", :fertility 46} {:x 34, :y 63, :state :scrub, :altitude 41, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 40} {:x 35, :y 63, :state :climax, :altitude 45, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 36, :y 63, :state :scrub, :altitude 45, :gradient 10, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 50} {:x 37, :y 63, :state :climax, :altitude 46, :gradient 9, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 26} {:x 38, :y 63, :state :pasture, :altitude 50, :gradient 11, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 34} {:x 39, :y 63, :state :camp, :altitude 47, :gradient 31, :generation 89, :rule "if state is in grassland or heath and more than 2 neighbours are pasture then 1 chance in 3 state should be camp", :fertility 18} {:x 40, :y 63, :state :grassland, :altitude 32, :gradient 46, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 24} {:x 41, :y 63, :state :water, :altitude 1, :gradient 31, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 63, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 63, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 63, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 63, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 63, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 64, :state :water, :altitude 1, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 64, :state :water, :altitude 1, :gradient 56, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 64, :state :climax, :altitude 13, :gradient 56, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 13, :y 64, :state :climax, :altitude 28, :gradient 73, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 14, :y 64, :state :scrub, :altitude 74, :gradient 66, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 15, :y 64, :state :forest, :altitude 80, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 31} {:x 16, :y 64, :state :fire, :altitude 63, :gradient 32, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 46} {:x 17, :y 64, :state :scrub, :altitude 55, :gradient 22, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 9} {:x 18, :y 64, :state :climax, :altitude 49, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 19, :y 64, :state :climax, :altitude 50, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 20, :y 64, :state :climax, :altitude 54, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 21, :y 64, :state :climax, :altitude 55, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 29} {:x 22, :y 64, :state :scrub, :altitude 51, :gradient 14, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 17} {:x 23, :y 64, :state :scrub, :altitude 51, :gradient 12, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 42} {:x 24, :y 64, :state :fire, :altitude 49, :gradient 10, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 53} {:x 25, :y 64, :state :climax, :altitude 45, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 26, :y 64, :state :climax, :altitude 41, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 27, :y 64, :state :climax, :altitude 41, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 28, :y 64, :state :scrub, :altitude 41, :gradient 8, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 73} {:x 29, :y 64, :state :scrub, :altitude 41, :gradient 9, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 50} {:x 30, :y 64, :state :forest, :altitude 47, :gradient 8, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 43} {:x 31, :y 64, :state :waste, :altitude 45, :gradient 9, :generation 89, :rule "if state is fire then state should be waste", :fertility 47} {:x 32, :y 64, :state :heath, :altitude 40, :gradient 7, :generation 89, :rule "if state is waste and some neighbours are forest then state should be heath", :fertility 58} {:x 33, :y 64, :state :fire, :altitude 42, :gradient 7, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 46} {:x 34, :y 64, :state :fire, :altitude 37, :gradient 10, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 29} {:x 35, :y 64, :state :scrub, :altitude 40, :gradient 10, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 23} {:x 36, :y 64, :state :climax, :altitude 41, :gradient 11, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 37, :y 64, :state :scrub, :altitude 43, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 29} {:x 38, :y 64, :state :pasture, :altitude 45, :gradient 32, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 47} {:x 39, :y 64, :state :pasture, :altitude 36, :gradient 49, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 31} {:x 40, :y 64, :state :house, :altitude 19, :gradient 46, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 41, :y 64, :state :water, :altitude 1, :gradient 31, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 64, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 65, :state :water, :altitude 1, :gradient 22, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 65, :state :water, :altitude 1, :gradient 62, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 65, :state :climax, :altitude 27, :gradient 62, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 12, :y 65, :state :scrub, :altitude 57, :gradient 62, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 46} {:x 13, :y 65, :state :fire, :altitude 42, :gradient 61, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 37} {:x 14, :y 65, :state :fire, :altitude 64, :gradient 52, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 48} {:x 15, :y 65, :state :waste, :altitude 75, :gradient 30, :generation 89, :rule "if state is fire then state should be waste", :fertility 42} {:x 16, :y 65, :state :waste, :altitude 61, :gradient 33, :generation 89, :rule "if state is fire then state should be waste", :fertility 43} {:x 17, :y 65, :state :climax, :altitude 52, :gradient 21, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 18, :y 65, :state :climax, :altitude 46, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 19, :y 65, :state :climax, :altitude 46, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 20, :y 65, :state :climax, :altitude 50, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 27} {:x 21, :y 65, :state :climax, :altitude 49, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 22, :y 65, :state :fire, :altitude 46, :gradient 19, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 57} {:x 23, :y 65, :state :waste, :altitude 45, :gradient 15, :generation 89, :rule "if state is fire then state should be waste", :fertility 29} {:x 24, :y 65, :state :heath, :altitude 42, :gradient 15, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 57} {:x 25, :y 65, :state :scrub, :altitude 41, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 26, :y 65, :state :forest, :altitude 40, :gradient 9, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 46} {:x 27, :y 65, :state :climax, :altitude 38, :gradient 8, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 50} {:x 28, :y 65, :state :scrub, :altitude 38, :gradient 8, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 52} {:x 29, :y 65, :state :climax, :altitude 38, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 30, :y 65, :state :scrub, :altitude 41, :gradient 12, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 51} {:x 31, :y 65, :state :climax, :altitude 38, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 32, :y 65, :state :waste, :altitude 38, :gradient 10, :generation 89, :rule "if state is fire then state should be waste", :fertility 35} {:x 33, :y 65, :state :climax, :altitude 43, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 34, :y 65, :state :pasture, :altitude 36, :gradient 12, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 37} {:x 35, :y 65, :state :grassland, :altitude 35, :gradient 10, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 18} {:x 36, :y 65, :state :grassland, :altitude 38, :gradient 12, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 43} {:x 37, :y 65, :state :climax, :altitude 40, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 48} {:x 38, :y 65, :state :pasture, :altitude 37, :gradient 33, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 49} {:x 39, :y 65, :state :grassland, :altitude 18, :gradient 44, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 46} {:x 40, :y 65, :state :water, :altitude 1, :gradient 35, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 65, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 65, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 66, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 66, :state :water, :altitude 1, :gradient 35, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 66, :state :climax, :altitude 23, :gradient 63, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 70} {:x 11, :y 66, :state :climax, :altitude 63, :gradient 63, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 12, :y 66, :state :climax, :altitude 63, :gradient 37, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 13, :y 66, :state :fire, :altitude 40, :gradient 27, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 35} {:x 14, :y 66, :state :waste, :altitude 50, :gradient 38, :generation 89, :rule "if state is fire then state should be waste", :fertility 47} {:x 15, :y 66, :state :heath, :altitude 59, :gradient 35, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 38} {:x 16, :y 66, :state :scrub, :altitude 56, :gradient 35, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 17, :y 66, :state :scrub, :altitude 47, :gradient 26, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 47} {:x 18, :y 66, :state :climax, :altitude 42, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 23} {:x 19, :y 66, :state :scrub, :altitude 40, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 31} {:x 20, :y 66, :state :climax, :altitude 41, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 39} {:x 21, :y 66, :state :climax, :altitude 38, :gradient 19, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 22, :y 66, :state :scrub, :altitude 36, :gradient 18, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 25} {:x 23, :y 66, :state :climax, :altitude 37, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 24, :y 66, :state :climax, :altitude 36, :gradient 13, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 25, :y 66, :state :climax, :altitude 37, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 57} {:x 26, :y 66, :state :climax, :altitude 37, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 27, :y 66, :state :scrub, :altitude 36, :gradient 8, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 62} {:x 28, :y 66, :state :climax, :altitude 33, :gradient 6, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 29} {:x 29, :y 66, :state :climax, :altitude 36, :gradient 9, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 30, :y 66, :state :fire, :altitude 37, :gradient 9, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 46} {:x 31, :y 66, :state :fire, :altitude 35, :gradient 8, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 53} {:x 32, :y 66, :state :climax, :altitude 38, :gradient 12, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 33, :y 66, :state :ploughland, :altitude 42, :gradient 20, :generation 89, :rule "if state is pasture and fertility is more than 10 and altitude is less than 100 and some neighbours are camp or some neighbours are house then state should be ploughland", :fertility 31} {:x 34, :y 66, :state :crop, :altitude 32, :gradient 28, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 22} {:x 35, :y 66, :state :pasture, :altitude 31, :gradient 36, :generation 89, :rule "if state is in grassland or heath and some neighbours are camp then 1 chance in 2 state should be pasture", :fertility 25} {:x 36, :y 66, :state :house, :altitude 32, :gradient 38, :generation 89, :rule "if state is in camp or abandoned and some neighbours are crop then state should be house", :fertility 13} {:x 37, :y 66, :state :climax, :altitude 33, :gradient 38, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 38, :y 66, :state :pasture, :altitude 28, :gradient 39, :generation 89, :rule "if state is in grassland or heath and some neighbours are camp then 1 chance in 2 state should be pasture", :fertility 42} {:x 39, :y 66, :state :waste, :altitude 12, :gradient 36, :generation 89, :rule "if state is camp then 1 chance in 5 state should be waste", :fertility 69} {:x 40, :y 66, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 66, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 67, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 67, :state :water, :altitude 2, :gradient 39, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 67, :state :climax, :altitude 36, :gradient 63, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 53} {:x 11, :y 67, :state :fire, :altitude 64, :gradient 40, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 55} {:x 12, :y 67, :state :waste, :altitude 54, :gradient 31, :generation 89, :rule "if state is fire then state should be waste", :fertility 32} {:x 13, :y 67, :state :climax, :altitude 37, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 14, :y 67, :state :waste, :altitude 40, :gradient 27, :generation 89, :rule "if state is fire then state should be waste", :fertility 43} {:x 15, :y 67, :state :climax, :altitude 45, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 16, :y 67, :state :waste, :altitude 46, :gradient 27, :generation 89, :rule "if state is fire then state should be waste", :fertility 35} {:x 17, :y 67, :state :scrub, :altitude 40, :gradient 25, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 37} {:x 18, :y 67, :state :climax, :altitude 35, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 38} {:x 19, :y 67, :state :scrub, :altitude 33, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 32} {:x 20, :y 67, :state :scrub, :altitude 33, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 34} {:x 21, :y 67, :state :scrub, :altitude 31, :gradient 13, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 40} {:x 22, :y 67, :state :climax, :altitude 32, :gradient 10, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 29} {:x 23, :y 67, :state :climax, :altitude 32, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 24, :y 67, :state :scrub, :altitude 33, :gradient 8, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 49} {:x 25, :y 67, :state :forest, :altitude 33, :gradient 6, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 52} {:x 26, :y 67, :state :scrub, :altitude 33, :gradient 6, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 65} {:x 27, :y 67, :state :waste, :altitude 33, :gradient 6, :generation 89, :rule "if state is fire then state should be waste", :fertility 69} {:x 28, :y 67, :state :climax, :altitude 32, :gradient 5, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 29, :y 67, :state :waste, :altitude 32, :gradient 6, :generation 89, :rule "if state is fire then state should be waste", :fertility 40} {:x 30, :y 67, :state :climax, :altitude 35, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 31, :y 67, :state :climax, :altitude 33, :gradient 12, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 26} {:x 32, :y 67, :state :climax, :altitude 35, :gradient 29, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 33, :y 67, :state :house, :altitude 31, :gradient 41, :generation 89, :rule "if state is house and some neighbours are pasture then state should be house", :fertility 24} {:x 34, :y 67, :state :grassland, :altitude 23, :gradient 41, :generation 89, :rule "if state is market then state should be grassland", :fertility 24} {:x 35, :y 67, :state :house, :altitude 15, :gradient 31, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 9} {:x 36, :y 67, :state :water, :altitude 2, :gradient 32, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 67, :state :water, :altitude 2, :gradient 32, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 67, :state :water, :altitude 2, :gradient 32, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 67, :state :water, :altitude 1, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 67, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 67, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 68, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 68, :state :heath, :altitude 18, :gradient 39, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 18} {:x 10, :y 68, :state :climax, :altitude 40, :gradient 62, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 11, :y 68, :state :climax, :altitude 33, :gradient 46, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 12, :y 68, :state :waste, :altitude 36, :gradient 37, :generation 89, :rule "if state is fire then state should be waste", :fertility 59} {:x 13, :y 68, :state :heath, :altitude 35, :gradient 23, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 34} {:x 14, :y 68, :state :heath, :altitude 32, :gradient 14, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 41} {:x 15, :y 68, :state :climax, :altitude 36, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 50} {:x 16, :y 68, :state :climax, :altitude 36, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 31} {:x 17, :y 68, :state :scrub, :altitude 32, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 36} {:x 18, :y 68, :state :climax, :altitude 31, :gradient 11, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 28} {:x 19, :y 68, :state :climax, :altitude 29, :gradient 7, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 36} {:x 20, :y 68, :state :climax, :altitude 29, :gradient 5, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 21, :y 68, :state :scrub, :altitude 28, :gradient 5, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 53} {:x 22, :y 68, :state :scrub, :altitude 29, :gradient 4, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 48} {:x 23, :y 68, :state :climax, :altitude 29, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 24, :y 68, :state :climax, :altitude 31, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 25, :y 68, :state :climax, :altitude 31, :gradient 6, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 26, :y 68, :state :scrub, :altitude 31, :gradient 5, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 61} {:x 27, :y 68, :state :scrub, :altitude 31, :gradient 4, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 56} {:x 28, :y 68, :state :heath, :altitude 31, :gradient 4, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 46} {:x 29, :y 68, :state :fire, :altitude 31, :gradient 6, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 11} {:x 30, :y 68, :state :fire, :altitude 33, :gradient 8, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 30} {:x 31, :y 68, :state :fire, :altitude 31, :gradient 18, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 63} {:x 32, :y 68, :state :climax, :altitude 26, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 56} {:x 33, :y 68, :state :climax, :altitude 13, :gradient 34, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 34, :y 68, :state :water, :altitude 1, :gradient 30, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 68, :state :water, :altitude 1, :gradient 22, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 68, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 68, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 68, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 68, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 68, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 69, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 69, :state :water, :altitude 2, :gradient 39, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 69, :state :climax, :altitude 18, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 79} {:x 11, :y 69, :state :climax, :altitude 27, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 49} {:x 12, :y 69, :state :climax, :altitude 31, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 13, :y 69, :state :climax, :altitude 32, :gradient 5, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 14, :y 69, :state :scrub, :altitude 31, :gradient 7, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 24} {:x 15, :y 69, :state :climax, :altitude 31, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 16, :y 69, :state :climax, :altitude 29, :gradient 22, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 17, :y 69, :state :climax, :altitude 29, :gradient 22, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 23} {:x 18, :y 69, :state :scrub, :altitude 31, :gradient 18, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 33} {:x 19, :y 69, :state :scrub, :altitude 29, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 51} {:x 20, :y 69, :state :scrub, :altitude 28, :gradient 17, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 40} {:x 21, :y 69, :state :climax, :altitude 28, :gradient 8, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 22, :y 69, :state :scrub, :altitude 28, :gradient 3, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 36} {:x 23, :y 69, :state :scrub, :altitude 28, :gradient 4, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 26} {:x 24, :y 69, :state :climax, :altitude 27, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 44} {:x 25, :y 69, :state :climax, :altitude 28, :gradient 4, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 26, :y 69, :state :scrub, :altitude 29, :gradient 3, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 27, :y 69, :state :scrub, :altitude 29, :gradient 3, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 53} {:x 28, :y 69, :state :forest, :altitude 29, :gradient 4, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 27} {:x 29, :y 69, :state :heath, :altitude 29, :gradient 6, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 32} {:x 30, :y 69, :state :waste, :altitude 31, :gradient 18, :generation 89, :rule "if state is fire then state should be waste", :fertility 49} {:x 31, :y 69, :state :climax, :altitude 27, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 58} {:x 32, :y 69, :state :climax, :altitude 17, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 46} {:x 33, :y 69, :state :water, :altitude 1, :gradient 25, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 69, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 69, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 70, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 70, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 70, :state :water, :altitude 1, :gradient 48, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 70, :state :climax, :altitude 24, :gradient 50, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 11, :y 70, :state :climax, :altitude 41, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 35} {:x 12, :y 70, :state :climax, :altitude 33, :gradient 24, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 47} {:x 13, :y 70, :state :heath, :altitude 31, :gradient 12, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 51} {:x 14, :y 70, :state :waste, :altitude 31, :gradient 11, :generation 89, :rule "if state is fire then state should be waste", :fertility 40} {:x 15, :y 70, :state :heath, :altitude 29, :gradient 20, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 27} {:x 16, :y 70, :state :waste, :altitude 22, :gradient 30, :generation 89, :rule "if state is fire then state should be waste", :fertility 32} {:x 17, :y 70, :state :waste, :altitude 14, :gradient 30, :generation 89, :rule "if state is fire then state should be waste", :fertility 31} {:x 18, :y 70, :state :heath, :altitude 14, :gradient 30, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 49} {:x 19, :y 70, :state :forest, :altitude 14, :gradient 30, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 46} {:x 20, :y 70, :state :heath, :altitude 23, :gradient 30, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 60} {:x 21, :y 70, :state :climax, :altitude 31, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 41} {:x 22, :y 70, :state :climax, :altitude 29, :gradient 4, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 32} {:x 23, :y 70, :state :forest, :altitude 28, :gradient 2, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 44} {:x 24, :y 70, :state :climax, :altitude 27, :gradient 1, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 48} {:x 25, :y 70, :state :climax, :altitude 28, :gradient 2, :generation 89, :rule "if state is forest and fertility is more than 5 and altitude is less than 70 then state should be climax", :fertility 50} {:x 26, :y 70, :state :scrub, :altitude 28, :gradient 2, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 61} {:x 27, :y 70, :state :scrub, :altitude 28, :gradient 2, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 58} {:x 28, :y 70, :state :scrub, :altitude 28, :gradient 3, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 38} {:x 29, :y 70, :state :scrub, :altitude 27, :gradient 8, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 36} {:x 30, :y 70, :state :heath, :altitude 27, :gradient 19, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 50} {:x 31, :y 70, :state :heath, :altitude 15, :gradient 30, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 49} {:x 32, :y 70, :state :water, :altitude 1, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 70, :state :water, :altitude 1, :gradient 16, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 70, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 71, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 71, :state :water, :altitude 2, :gradient 44, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 71, :state :climax, :altitude 14, :gradient 53, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 10, :y 71, :state :climax, :altitude 49, :gradient 56, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 11, :y 71, :state :climax, :altitude 51, :gradient 33, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 12, :y 71, :state :climax, :altitude 43, :gradient 26, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 13, :y 71, :state :fire, :altitude 37, :gradient 20, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 40} {:x 14, :y 71, :state :waste, :altitude 33, :gradient 15, :generation 89, :rule "if state is fire then state should be waste", :fertility 64} {:x 15, :y 71, :state :climax, :altitude 26, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 16, :y 71, :state :waste, :altitude 13, :gradient 28, :generation 89, :rule "if state is fire then state should be waste", :fertility 44} {:x 17, :y 71, :state :water, :altitude 1, :gradient 21, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 71, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 71, :state :water, :altitude 1, :gradient 22, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 71, :state :pasture, :altitude 15, :gradient 30, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 32} {:x 21, :y 71, :state :pasture, :altitude 28, :gradient 30, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 22} {:x 22, :y 71, :state :pasture, :altitude 28, :gradient 13, :generation 89, :rule "if state is in grassland or heath and some neighbours are camp then 1 chance in 2 state should be pasture", :fertility 27} {:x 23, :y 71, :state :pasture, :altitude 27, :gradient 2, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 23} {:x 24, :y 71, :state :scrub, :altitude 28, :gradient 1, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 40} {:x 25, :y 71, :state :scrub, :altitude 27, :gradient 10, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 32} {:x 26, :y 71, :state :climax, :altitude 27, :gradient 14, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 60} {:x 27, :y 71, :state :scrub, :altitude 27, :gradient 14, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 41} {:x 28, :y 71, :state :scrub, :altitude 27, :gradient 14, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 23} {:x 29, :y 71, :state :heath, :altitude 26, :gradient 8, :generation 89, :rule "if state is waste and some neighbours are scrub then state should be heath", :fertility 42} {:x 30, :y 71, :state :climax, :altitude 23, :gradient 15, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 70} {:x 31, :y 71, :state :scrub, :altitude 12, :gradient 26, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 58} {:x 32, :y 71, :state :water, :altitude 1, :gradient 25, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 71, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 71, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 72, :state :water, :altitude 1, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 72, :state :climax, :altitude 15, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 9, :y 72, :state :climax, :altitude 45, :gradient 52, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 10, :y 72, :state :climax, :altitude 54, :gradient 45, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 52} {:x 11, :y 72, :state :climax, :altitude 57, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 12, :y 72, :state :climax, :altitude 51, :gradient 23, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 66} {:x 13, :y 72, :state :climax, :altitude 41, :gradient 30, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 14, :y 72, :state :fire, :altitude 33, :gradient 15, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 47} {:x 15, :y 72, :state :climax, :altitude 26, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 21} {:x 16, :y 72, :state :water, :altitude 2, :gradient 25, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 72, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 72, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 72, :state :water, :altitude 1, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 72, :state :grassland, :altitude 18, :gradient 27, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 16} {:x 22, :y 72, :state :pasture, :altitude 28, :gradient 15, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 6} {:x 23, :y 72, :state :house, :altitude 27, :gradient 1, :generation 89, :rule "if state is in camp or abandoned and some neighbours are crop then state should be house", :fertility 34} {:x 24, :y 72, :state :forest, :altitude 28, :gradient 9, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 41} {:x 25, :y 72, :state :scrub, :altitude 27, :gradient 27, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 41} {:x 26, :y 72, :state :scrub, :altitude 18, :gradient 26, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 54} {:x 27, :y 72, :state :scrub, :altitude 14, :gradient 26, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 74} {:x 28, :y 72, :state :scrub, :altitude 20, :gradient 26, :generation 89, :rule "if state is heath and altitude is less than 120 then state should be scrub", :fertility 18} {:x 29, :y 72, :state :waste, :altitude 27, :gradient 16, :generation 89, :rule "if state is fire then state should be waste", :fertility 72} {:x 30, :y 72, :state :climax, :altitude 26, :gradient 16, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 55} {:x 31, :y 72, :state :climax, :altitude 26, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 23} {:x 32, :y 72, :state :camp, :altitude 12, :gradient 25, :generation 89, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp", :fertility 68} {:x 33, :y 72, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 72, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 73, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 73, :state :water, :altitude 1, :gradient 25, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 73, :state :water, :altitude 1, :gradient 25, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 73, :state :water, :altitude 1, :gradient 28, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 73, :state :climax, :altitude 28, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 29} {:x 9, :y 73, :state :climax, :altitude 45, :gradient 39, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 10, :y 73, :state :climax, :altitude 50, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 11, :y 73, :state :forest, :altitude 59, :gradient 15, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 62} {:x 12, :y 73, :state :climax, :altitude 56, :gradient 36, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 13, :y 73, :state :climax, :altitude 36, :gradient 54, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 14, :y 73, :state :climax, :altitude 26, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 15, :y 73, :state :camp, :altitude 26, :gradient 32, :generation 89, :rule "if state is in grassland or heath and more than 3 neighbours are water and generation is more than 20 then state should be camp", :fertility 52} {:x 16, :y 73, :state :climax, :altitude 12, :gradient 25, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 17, :y 73, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 73, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 73, :state :house, :altitude 13, :gradient 27, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 9} {:x 22, :y 73, :state :pasture, :altitude 28, :gradient 27, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 23, :y 73, :state :pasture, :altitude 28, :gradient 6, :generation 89, :rule "if state is in grassland or heath and some neighbours are camp then 1 chance in 2 state should be pasture", :fertility 30} {:x 24, :y 73, :state :grassland, :altitude 28, :gradient 27, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 54} {:x 25, :y 73, :state :pasture, :altitude 19, :gradient 27, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 62} {:x 26, :y 73, :state :water, :altitude 1, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 73, :state :water, :altitude 1, :gradient 19, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 73, :state :fire, :altitude 12, :gradient 28, :generation 89, :rule "if state is in forest or climax or camp or house or inn and some neighbours are fire then 1 chance in 3 state should be fire", :fertility 59} {:x 29, :y 73, :state :climax, :altitude 27, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 30, :y 73, :state :climax, :altitude 28, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 71} {:x 31, :y 73, :state :climax, :altitude 15, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 59} {:x 32, :y 73, :state :water, :altitude 1, :gradient 25, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 73, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 73, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 74, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 74, :state :water, :altitude 1, :gradient 32, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 74, :state :water, :altitude 1, :gradient 42, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 74, :state :climax, :altitude 13, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 74} {:x 6, :y 74, :state :climax, :altitude 26, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 75} {:x 7, :y 74, :state :heath, :altitude 18, :gradient 44, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 65} {:x 8, :y 74, :state :pasture, :altitude 29, :gradient 44, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 60} {:x 9, :y 74, :state :pasture, :altitude 42, :gradient 37, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 61} {:x 10, :y 74, :state :pasture, :altitude 50, :gradient 32, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 57} {:x 11, :y 74, :state :pasture, :altitude 42, :gradient 33, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 53} {:x 12, :y 74, :state :climax, :altitude 42, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 37} {:x 13, :y 74, :state :climax, :altitude 23, :gradient 55, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 63} {:x 14, :y 74, :state :water, :altitude 2, :gradient 35, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 74, :state :water, :altitude 1, :gradient 25, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 74, :state :water, :altitude 1, :gradient 25, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 74, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 74, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 74, :state :water, :altitude 2, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 74, :state :pasture, :altitude 23, :gradient 28, :generation 89, :rule "if state is in grassland or heath and some neighbours within 2 are house then state should be pasture", :fertility 10} {:x 23, :y 74, :state :house, :altitude 29, :gradient 26, :generation 89, :rule "if state is in camp or abandoned and some neighbours are crop then state should be house", :fertility 11} {:x 24, :y 74, :state :climax, :altitude 24, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 25, :y 74, :state :water, :altitude 2, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 74, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 74, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 74, :state :climax, :altitude 15, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 62} {:x 29, :y 74, :state :climax, :altitude 29, :gradient 17, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 51} {:x 30, :y 74, :state :climax, :altitude 20, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 34} {:x 31, :y 74, :state :water, :altitude 1, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 74, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 74, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 75, :state :water, :altitude 1, :gradient 21, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 75, :state :water, :altitude 2, :gradient 42, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 75, :state :climax, :altitude 33, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 5, :y 75, :state :climax, :altitude 43, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 72} {:x 6, :y 75, :state :climax, :altitude 45, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 76} {:x 7, :y 75, :state :climax, :altitude 33, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 65} {:x 8, :y 75, :state :crop, :altitude 13, :gradient 41, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 68} {:x 9, :y 75, :state :grassland, :altitude 33, :gradient 49, :generation 89, :rule "if state is crop then state should be grassland and fertility should be fertility - 1", :fertility 68} {:x 10, :y 75, :state :crop, :altitude 41, :gradient 37, :generation 89, :rule "if state is ploughland then state should be crop", :fertility 27} {:x 11, :y 75, :state :forest, :altitude 27, :gradient 48, :generation 89, :rule "if state is scrub then 1 chance in 5 state should be forest", :fertility 40} {:x 12, :y 75, :state :climax, :altitude 26, :gradient 41, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 61} {:x 13, :y 75, :state :climax, :altitude 15, :gradient 41, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 70} {:x 14, :y 75, :state :water, :altitude 1, :gradient 22, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 75, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 75, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 75, :state :water, :altitude 1, :gradient 22, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 75, :state :water, :altitude 2, :gradient 28, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 75, :state :house, :altitude 13, :gradient 28, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 24, :y 75, :state :house, :altitude 12, :gradient 28, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house", :fertility 28} {:x 25, :y 75, :state :water, :altitude 1, :gradient 23, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 75, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 75, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 75, :state :climax, :altitude 19, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 40} {:x 29, :y 75, :state :climax, :altitude 29, :gradient 27, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 30, :y 75, :state :climax, :altitude 15, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 80} {:x 31, :y 75, :state :water, :altitude 1, :gradient 19, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 75, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 76, :state :water, :altitude 1, :gradient 21, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 76, :state :heath, :altitude 22, :gradient 42, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath"} {:x 4, :y 76, :state :climax, :altitude 43, :gradient 43, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 69} {:x 5, :y 76, :state :climax, :altitude 45, :gradient 18, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 67} {:x 6, :y 76, :state :climax, :altitude 42, :gradient 32, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 77} {:x 7, :y 76, :state :heath, :altitude 28, :gradient 44, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 72} {:x 8, :y 76, :state :water, :altitude 1, :gradient 32, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 76, :state :house, :altitude 13, :gradient 40, :generation 89, :rule "if state is house and more than 2 neighbours are water then state should be house"} {:x 10, :y 76, :state :climax, :altitude 19, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 70} {:x 11, :y 76, :state :climax, :altitude 13, :gradient 40, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 68} {:x 12, :y 76, :state :water, :altitude 2, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 76, :state :water, :altitude 1, :gradient 25, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 76, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 76, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 76, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 76, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 76, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 76, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 76, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 76, :state :climax, :altitude 15, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 73} {:x 29, :y 76, :state :climax, :altitude 23, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 74} {:x 30, :y 76, :state :water, :altitude 2, :gradient 28, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 76, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 76, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 77, :state :water, :altitude 1, :gradient 21, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 77, :state :climax, :altitude 14, :gradient 42, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 70} {:x 4, :y 77, :state :climax, :altitude 32, :gradient 43, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 74} {:x 5, :y 77, :state :climax, :altitude 32, :gradient 28, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 75} {:x 6, :y 77, :state :climax, :altitude 27, :gradient 44, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 54} {:x 7, :y 77, :state :climax, :altitude 13, :gradient 41, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 64} {:x 8, :y 77, :state :water, :altitude 1, :gradient 27, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 77, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 77, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 77, :state :water, :altitude 1, :gradient 18, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 77, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 77, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 77, :state :water, :altitude 1, :gradient 14, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 77, :state :water, :altitude 1, :gradient 22, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 77, :state :heath, :altitude 12, :gradient 22, :generation 89, :rule "if state is waste and some neighbours are climax then state should be heath", :fertility 38} {:x 30, :y 77, :state :water, :altitude 1, :gradient 22, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 77, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 77, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 78, :state :water, :altitude 1, :gradient 13, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 78, :state :water, :altitude 2, :gradient 31, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 78, :state :climax, :altitude 17, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 77} {:x 5, :y 78, :state :climax, :altitude 20, :gradient 31, :generation 89, :rule "if state is in forest or climax then fertility should be fertility + 1", :fertility 72} {:x 6, :y 78, :state :waste, :altitude 18, :gradient 31, :generation 89, :rule "if state is fire then state should be waste", :fertility 62} {:x 7, :y 78, :state :water, :altitude 1, :gradient 26, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 78, :state :water, :altitude 1, :gradient 12, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 78, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 78, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 78, :state :water, :altitude 1, :gradient 11, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 78, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 79, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 79, :state :water, :altitude 1, :gradient 16, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 79, :state :water, :altitude 1, :gradient 19, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 79, :state :water, :altitude 2, :gradient 19, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 79, :state :water, :altitude 2, :gradient 19, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 79, :state :water, :altitude 1, :gradient 17, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 79, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 80, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 80, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 80, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 80, :state :water, :altitude 1, :gradient 1, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 80, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}] [{:x 0, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 1, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 2, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 3, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 4, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 5, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 6, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 7, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 8, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 9, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 10, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 11, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 12, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 13, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 14, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 15, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 16, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 17, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 18, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 19, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 20, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 21, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 22, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 23, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 24, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 25, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 26, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 27, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 28, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 29, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 30, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 31, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 32, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 33, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 34, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 35, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 36, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 37, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 38, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 39, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 40, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 41, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 42, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 43, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 44, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 45, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 46, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 47, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 48, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 49, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 50, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 51, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 52, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 53, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 54, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 55, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 56, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 57, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 58, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 59, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 60, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 61, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 62, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 63, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 64, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 65, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 66, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 67, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 68, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 69, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 70, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 71, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 72, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 73, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 74, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 75, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 76, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 77, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 78, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 79, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 80, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"} {:x 81, :y 81, :state :water, :altitude 1, :gradient 0, :generation 89, :rule "if state is water then state should be water"}]]